return(function(...)local yield={"\078\085\071\053\057\052\055\089\114\082\061\061","\065\054\079\113\076\119\120\074\066\054\079\072\107\070\120\100\043\070\079\084\076\078\057\056";"\076\075\054\110\049\077\101\065\043\066\069\056\117\085\099\107\111\115\119\112";"\111\112\113\083\076\100\079\098\073\110\113\099\065\065\073\109","\079\089\122\114","\102\081\049\049\066\119\112\078\076\119\057\068\102\085\076\118","\050\111\116\108\118\049\090\054\102\116\100\111\097\117\056\099\122\104\117\054\103\057\099\088\116\050\120\084\107\088\076\049","\050\102\077\089\120\048\075\061","\051\070\112\081\107\108\112\081\121\097\073\113\121\078\087\057";"\097\074\079\068\107\078\073\057\069\082\061\061";"\077\082\076\049\075\065\076\055\086\080\061\061","\050\086\070\056\090\101\043\061";"\047\080\107\073\067\078\076\105\071\049\049\104\078\111\106\043","\081\053\101\069\049\056\049\049\087\043\047\081","\089\079\103\048\078\105\075\109\098\103\051\108";"\106\050\102\085";"\121\100\114\081\051\054\066\100\102\100\113\102\066\097\066\057\066\057\082\061";"\110\068\110\074\051\043\061\061";"\120\100\089\103\069\076\100\061";"\115\078\121\067","\108\057\090\051\106\105\089\061";"\073\078\057\084\076\119\076\068\051\056\114\081\043\108\088\085\076\097\114\081\107\115\099\061";"\071\052\084\082\120\086\089\061","\049\078\106\075","\109\105\047\043\105\043\061\061","\099\087\122\054\077\101\076\056\051\070\047\106","\101\049\101\114\111\103\069\087\065\082\061\061","\073\080\055\081\121\056\075\117\050\066\099\065\078\121\106\103\089\117\115\047\120\116\053\110\115\090\080\047\048\113\106\086","\080\113\113\057\087\114\081\061";"\086\116\052\061";"\048\079\102\056\112\070\051\061","\106\071\084\085\084\054\074\070\076\083\089\070\098\070\119\061","\065\043\076\067";"\066\054\079\110\066\067\116\068\107\078\051\061";"\065\080\061\061","\067\089\116\071\087\084\105\089";"\120\077\067\089\112\080\061\061","\107\065\078\097\083\043\061\061";"\102\120\068\099\051\078\113\110\108\119\066\090\121\112\113\075\076\112\043\061";"\098\073\120\109\065\119\121\116\051\119\051\061","\065\049\070\099\121\068\054\099\057\066\069\106\077\120\051\061","\083\090\090\106\084\080\061\061","\117\111\099\052\119\052\082\061","\105\049\117\078\103\082\053\070\079\112\077\089\087\047\112\048\120\057\054\099\057\043\067\110\070\113\105\117\055\100\048\087\120\112\104\050\065\071\043\119\056\119\083\102\087\109\075\043\082\112\108\080\114\069\048\117\084\087\054\084\106\114\114\104\118\077\115\105\102\108\112\081\051\056\113\069\120\050\077\085\066\065\101\054\070\107\065\103\111\077\119\061";"\108\118\101\054\109\056\113\078\090\122\116\113\082\078\075\089","\117\112\110\068\078\100\099\083\047\112\081\061";"\121\072\085\057\101\054\121\061";"\055\098\078\043\077\090\043\076\090\047\088\050","\073\078\057\086\076\112\114\057\051\056\076\057\051\080\061\061";"\089\049\061\061","\076\067\116\113\076\074\114\081\121\097\116\081","\097\052\100\065\077\086\080\061","\048\068\078\053\071\073\072\055\122\084\086\043";"\065\069\067\078\116\054\111\089\074\043\061\061";"\047\118\100\115\082\110\104\100\088\049\061\061";"\074\048\076\116","\084\109\116\102\106\049\061\061";"\102\072\049\098\050\070\072\061";"\088\072\098\105\074\084\113\074\107\056\076\115\050\087\068\100\056\087\106\061","\081\112\078\115\086\071\072\114\106\086\047\050\075\117\078\068";"\066\070\079\086\102\115\114\049\121\108\114\057";"\098\070\119\067\122\049\061\061";"\075\049\114\118\122\049\061\061";"\102\071\054\102\120\079\083\097\120\075\113\119\102\086\051\061","\077\074\074\056\055\055\057\084\109\102\075\086\086\084\066\073";"\099\081\110\110\117\043\061\061","\106\070\082\052\050\049\061\061";"\078\068\053\114\088\110\082\073\076\082\061\061";"\115\057\081\085\089\050\075\065\043\074\113\111\108\079\089\061","\115\070\087\121\069\103\122\101\111\081\077\054";"\121\070\079\084\121\070\120\081","\102\075\065\088\055\109\082\050\103\049\061\061","\053\108\051\110\051\049\061\061";"\113\043\097\101","\120\068\050\097","\098\113\090\084\101\083\079\105\097\115\073\053\115\080\061\061","\053\065\090\081\073\097\055\100\108\080\061\061","\088\068\117\090";"\077\110\073\077\120\090\084\067\075\052\117\114\121\097\071\113\054\069\080\053\121\106\102\079\081\113\052\069\083\053\099\067\088\081\050\076\069\103\099\061","\112\071\073\068\107\065\099\061";"\052\056\103\122\067\114\073\119\122\052\106\061","\116\089\065\117\121\082\061\061";"\116\109\057\071\121\088\050\105\085\108\053\075","\076\067\116\113\076\074\073\103\076\070\066\072\076\043\061\061","\119\079\085\109\054\070\119\061","\102\110\086\085\097\071\049\061";"\072\049\085\089\122\052\103\047\110\057\080\054\084\086\057\055","\107\078\104\099\114\119\114\090\073\100\120\117\114\112\112\071\051\043\061\061";"\121\085\076\073\065\110\114\086\102\100\113\102\069\054\114\088\071\043\061\061","\051\120\081\057";"\106\109\072\057\043\103\099\061";"\057\118\114\098\048\080\061\061","\090\100\073\120\076\110\076\111\111\108\066\102\107\081\088\075\076\082\061\061","\043\108\073\100\090\108\088\049\066\097\043\061","\112\057\113\078\107\115\043\074\051\078\116\120\121\074\118\067\107\057\082\061","\053\082\120\103\072\043\061\061","\070\077\111\087\098\067\065\102\066\050\056\111\084\089\120\053\107\084\075\106\053\114\120\049\075\080\061\061";"\052\057\066\110\108\112\112\050\112\100\116\108\073\119\121\081";"\076\076\051\051\055\120\111\052\107\043\086\101\071\102\052\071\113\087\119\061","\073\082\050\052";"\121\103\056\056\075\105\082\061","\073\100\113\055\073\067\119\086\121\056\119\087\076\078\120\043\111\043\061\061","\111\048\080\057\076\055\089\068\111\080\061\061","\077\087\110\087\083\106\118\088\090\088\072\074\107\111\089\081\081\048\099\119";"\118\075\051\087\085\089\116\069\086\080\061\061";"\122\100\057\109\054\101\101\078\104\116\049\110\114\085\077\115\109\118\100\061","\120\075\066\057\107\086\101\081\114\050\110\073\072\051\079\106\106\102\070\109\103\073\121\083\090\115\120\078\087\099\084\112\083\047\098\100","\107\085\078\090\110\082\061\061";"\050\120\112\056\053\098\081\117\067\122\057\106";"\073\070\112\081\073\054\112\110\121\070\112\084\076\054\120\084\066\067\052\061","\051\078\114\081\090\085\076\119\071\074\066\068\071\115\116\121\090\080\061\061","\102\067\051\110\066\056\068\102\108\078\087\075\112\081\073\115";"\048\085\108\118\069\106\084\070\112\085\079\099\090\072\099\061";"\121\108\066\065\052\119\079\055\051\098\113\109\102\098\057\110\043\080\061\061","\051\117\103\081\067\081\077\065\106\082\061\061";"\118\117\119\110\043\105\100\061","\076\081\116\098\090\085\066\074\107\074\080\081\090\097\116\113\066\071\119\061","\109\054\043\106\067\113\053\112\101\103\089\061","\107\108\120\081\102\082\061\061";"\047\089\071\057\114\077\087\110\055\111\080\090\084\043\061\061";"\049\074\086\048\109\101\113\069\073\043\061\061";"\047\050\068\106\100\104\051\112\118\080\061\061","\087\043\098\115\054\053\122\066\120\088\100\061";"\066\054\120\110\102\049\061\061","\109\097\069\105\072\054\120\056";"\103\104\116\086\049\071\049\116\099\049\043\051\097\105\073\080\107\077\097\120\047\065\115\111\068\080\061\061";"\119\100\117\116\113\054\106\085\068\049\061\061","\111\080\061\061";"\047\056\097\111\103\087\071\103\089\043\086\043\116\054\120\084\071\097\081\061","\102\070\112\049\073\067\073\054\108\120\066\097\043\100\120\073\121\080\061\061";"\079\111\120\055\067\078\118\068\056\065\110\098\057\080\061\061","\056\082\054\104\069\085\080\061";"\115\086\118\104\050\100\072\103\097\053\043\061","\108\049\089\098\066\070\121\110\079\055\089\057\054\113\066\098\083\080\061\061","\114\120\120\088\102\056\112\101\052\057\076\081\102\108\071\087\076\056\119\061";"\049\086\107\054\068\084\076\080";"\116\088\055\048\117\100\078\089\121\080\071\081";"\109\082\089\052\101\116\068\104\104\043\100\061";"\112\119\068\065\069\080\061\061","\086\088\089\121\049\102\067\066\052\082\061\061";"\069\087\104\115\051\071\116\111\097\043\061\061","\119\099\110\056\117\056\070\103\080\107\057\053\097\043\061\061";"\043\070\079\072\107\115\099\110";"\043\056\112\081\066\054\079\084\052\100\073\103\066\070\075\061";"\047\109\089\098\072\105\089\061","\098\070\088\051\105\074\055\082\088\109\074\101\048\049\112\080\115\049\061\061","\068\052\043\086\114\080\061\061","\067\105\118\052\068\082\061\061","\066\098\099\052\102\077\106\070\048\050\077\051\070\076\098\118";"\090\080\061\061","\081\080\056\090";"\073\078\112\050\069\108\113\112\073\078\116\108\065\110\057\084","\084\122\047\113\104\048\056\107\082\049\061\061";"\065\055\112\085\114\104\072\061","\087\102\100\089\120\111\074\104\099\055\043\061","\106\110\082\066\066\078\067\114","\084\119\067\052\072\080\061\061";"\108\054\120\076\101\074\122\050\100\043\067\077\066\073\087\076\082\114\098\083\116\121\101\071\081\082\061\061";"\065\112\099\081\121\071\087\115\052\074\121\049\071\078\120\103";"\076\108\114\111\102\054\066\108\069\078\073\102\076\070\114\101\065\049\061\061","\086\043\061\061","\073\105\083\052\085\110\056\099","\121\085\057\118\090\115\068\109\107\070\113\078\107\108\066\050\073\110\121\061";"\101\110\082\088\067\048\106\061","\076\078\057\086\076\097\118\086\107\115\113\068\107\108\057\081\069\097\118\086\107\070\074\049\066\082\061\061";"\088\121\047\116\103\043\048\049\114\053\073\098\109\082\061\061","\099\055\122\070","\072\103\086\054\115\049\061\061","\113\081\082\061","\043\070\079\084\107\078\112\085\066\082\061\061","\106\082\083\107\078\049\050\051\098\056\099\061";"\110\079\112\067\110\083\102\103\052\088\112\083\081\049\061\061","\110\082\061\061";"\051\115\073\086\102\108\088\056","\098\086\065\112\089\074\117\109\077\090\097\101\118\043\061\061","\077\076\073\078\068\100\079\054";"\104\050\080\047\053\090\085\106\067\048\080\061";"\057\073\088\076\079\099\119\097\103\071\043\061","\098\067\072\076\068\098\054\078\066\105\082\104\104\051\051\061","\105\076\109\085\053\080\061\061","\089\100\117\050\043\075\075\077\043\051\119\061","\048\067\086\074\120\082\061\061";"\110\082\087\098\079\049\065\080\086\116\104\108\098\082\061\061";"\118\049\075\085\048\078\069\119";"\082\090\066\089\115\100\071\121\108\106\106\077\047\068\084\117\077\117\107\112";"\051\098\112\077\067\099\119\061","\073\116\085\118\077\043\121\050\057\102\100\061","\065\106\079\103\081\082\061\061";"\076\078\087\103\107\115\099\061";"\112\074\122\057\090\078\087\065\099\098\067\071\113\049\068\050","\052\100\066\111\114\110\121\074\076\057\076\083\107\098\112\102\051\082\061\061";"\110\051\120\113\105\080\061\061","\090\114\084\069\097\083\106\087\090\103\099\061","\111\110\074\101\050\052\071\061";"\043\115\065\109\102\121\100\061";"\043\056\112\068\107\054\073\116\107\056\073\057\051\078\076\113\121\070\112\065\076\108\114\081\102\108\079\084","\097\074\079\056\121\049\061\061";"\071\054\119\076\055\080\061\061";"\111\106\104\097\121\111\112\100\077\108\043\121\105\067\073\089\055\043\086\080\085\080\061\061","\054\068\049\081\100\080\061\061";"\066\054\120\048\107\054\071\061","\056\081\081\100\121\082\061\061","\052\118\090\075\115\054\100\119\048\069\121\061","\073\070\112\081\043\070\113\068\107\054\073\086\076\108\075\061";"\079\054\112\121\100\069\048\073\119\080\061\061";"\108\120\076\078\121\057\116\074\121\108\088\100\076\085\057\115\121\080\061\061","\088\087\122\079\113\112\099\061";"\043\056\112\068\107\054\073\098\107\070\088\078\102\108\066\065\076\108\114\081\102\108\079\084";"\101\111\097\122\086\082\061\061","\043\108\073\100\112\054\120\048";"\087\110\087\097\114\076\071\061","\055\097\050\081\109\051\087\088\057\057\080\104\089\080\061\061","\114\067\118\120\066\078\066\108\112\074\051\087\069\120\112\050\108\043\061\061";"\087\100\078\114\101\106\102\052\116\086\049\061";"\069\090\082\110","\051\073\070\118\103\088\097\119\053\099\097\067\080\043\061\061";"\078\086\043\100\106\105\078\087\087\049\061\061","\073\097\120\074\102\097\118\071\107\070\079\072","\106\109\080\077\047\097\097\120\104\083\076\107\070\083\113\055\098\082\061\061","\121\113\087\076\086\049\052\061";"\051\078\120\084\076\054\079\104","\073\057\112\119\065\082\061\061","\070\087\084\078\073\072\108\078","\066\081\119\086\066\098\073\118\107\057\089\075\069\108\052\081";"\088\085\076\068\122\049\061\061","\052\078\050\106","\048\052\102\079\097\043\061\061";"\073\100\088\085\090\097\113\120\102\054\112\086\069\054\104\081\076\082\061\061";"\076\070\112\081\076\070\112\084\066\080\061\061","\088\070\077\056\100\048\051\061","\090\108\066\084\107\115\116\057\112\054\113\057\107\108\112\065\076\097\073\081\102\108\088\056\051\049\061\061";"\080\103\075\102\089\065\078\122","\081\074\079\104\121\084\121\106\111\057\107\086\080\083\108\053\051\080\061\061";"\107\112\120\102\069\108\116\116\090\071\051\061","\074\065\115\083\081\120\074\065\112\119\100\061","\101\117\118\068\074\099\120\097";"\057\087\107\051\075\057\103\109\071\065\052\061","\113\089\075\111\088\080\076\104\055\101\089\061";"\078\049\067\070\116\085\070\103\110\101\052\061","\087\099\113\122\100\103\114\075\080\111\083\122\077\069\102\074\110\057\069\051","\107\102\109\069\117\049\061\061";"\107\102\054\050\109\048\054\120\090\107\100\061","\112\103\102\101\109\048\072\061";"\077\043\105\067\112\119\055\075\079\115\054\075\087\121\082\061","\076\070\120\104\076\043\061\061","\087\088\048\057\048\043\061\061","\120\089\049\055","\052\075\067\088\117\117\099\061","\116\052\072\120\048\098\119\061","\052\112\097\101\066\080\061\061","\050\117\054\113\078\065\078\099\043\099\119\082","\104\048\119\100\066\088\080\108\054\083\106\065\073\082\061\061";"\076\107\103\089\097\119\066\122\052\116\043\086\100\089\071\080\109\069\112\083\074\115\120\089\114\077\101\114\102\081\090\069\085\082\088\083\121\079\100\100\075\053\090\084\079\053\051\102\111\097\056\122\066\075\105\107\099\055\109\047\083\089\097\081\049\080\101\090\100\099\066\070\122\066\113\043\103\071\090\101\074\108\102\111\073\108\100\053\100\050\048\088\109\105\090\120\098\049\061\061";"\090\108\088\110\066\054\120\084\121\070\071\061";"\109\098\114\067\076\120\100\080\121\056\104\105";"\066\104\110\097\099\100\084\084\107\118\113\088\104\078\097\053";"\071\053\118\117\089\122\071\056\103\043\061\061";"\078\083\099\116\079\076\121\073\043\079\047\107\054\117\072\061";"\107\098\119\061";"\043\115\116\057\121\097\073\057\112\070\057\084\076\054\079\115","\065\081\119\120\090\119\085\047\050\101\073\050\104\066\071\061","\099\099\107\089\086\080\061\061";"\076\088\106\113\116\112\099\061","\076\078\073\071\090\071\087\103\071\056\119\088\090\085\120\120\071\067\051\061";"\108\081\086\117\083\043\061\061";"\071\070\112\084\076\119\104\057\069\071\112\070\076\108\088\081","\051\053\117\083\050\090\052\065\087\078\102\099\110\115\115\073\075\082\049\110\053\076\075\061";"\069\107\086\055\099\052\056\109\065\112\079\072\119\108\082\072\089\066\080\107";"\122\104\070\047\054\099\085\101\053\082\061\061","\049\114\116\118\122\082\120\066\087\072\075\061";"\112\047\068\083\075\080\061\061","\055\089\109\080\088\080\061\061";"\068\088\118\081\122\049\061\061","\078\082\061\061","\051\109\054\048\073\108\086\073","\107\073\069\098\054\121\113\086\080\077\078\104\043\110\043\061";"\117\067\080\111\071\072\105\052\105\048\085\081\118\047\101\078\107\082\061\061","\088\084\073\085\074\114\081\116\079\079\112\057\052\109\089\061","\090\097\114\118","\047\112\101\086\043\108\120\090\065\054\051\061","\089\113\108\097\043\049\061\061";"\066\115\113\070\052\108\057\089\114\100\088\054\090\085\073\108\114\097\071\061","\043\108\073\100\073\067\116\103\051\054\073\103\066\070\075\061","\120\043\055\108\122\115\070\049\075\082\061\061","\073\108\088\074\107\043\061\061","\069\043\076\111\086\048\121\061";"\073\117\053\105\075\087\048\098\105\111\055\049","\075\080\043\102","\097\073\072\087\108\051\080\103\107\087\107\074\119\043\061\061","\048\080\047\107\113\080\061\061";"\075\074\056\097\107\080\061\061","\055\075\114\100\067\079\122\048\048\097\087\086\106\049\077\082\101\082\061\061","\098\082\106\109\112\097\099\061";"\066\100\113\110\071\081\068\111\102\054\113\108\069\065\057\121","\073\070\112\081\071\067\116\103\051\054\112\086\066\067\057\098\102\054\120\084\076\070\112\100\071\070\057\056\107\078\120\072","\119\110\068\085\109\070\071\061","\121\112\111\070\077\049\090\052\086\050\119\052\099\077\049\061";"\076\057\066\120\102\100\114\121\121\110\057\084\108\085\076\108\107\043\061\061";"\051\115\073\113\051\056\073\043\107\115\052\061","\115\073\067\079\069\043\061\061";"";"\055\072\111\087\049\043\061\061","\050\117\054\108\116\080\061\061","\078\112\098\116\088\112\052\061","\078\081\081\098\115\101\082\061","\055\077\067\052\087\080\061\061";"\102\051\119\106\120\112\080\076","\101\077\070\117";"\072\071\053\120\119\083\080\061","\084\122\073\079","\107\054\112\084";"\089\081\047\068\122\043\061\061";"\119\074\113\106\047\088\076\113";"\082\122\089\099\109\077\104\079\065\112\077\065\117\049\121\099\105\082\061\061","\090\043\108\120\111\110\043\061","\051\054\114\113\107\054\049\061";"\106\097\083\118\083\067\106\101\113\097\089\061";"\071\083\110\104\084\071\057\057\057\089\081\061","\080\098\090\119\067\050\081\088\099\072\110\086","\075\050\087\097","\054\056\086\066\074\049\061\061","\051\114\072\061","\097\074\079\104\076\097\073\113\066\054\120\048\107\054\071\061";"\079\118\111\080\119\043\061\061";"\084\053\082\048\067\112\108\047\119\104\100\061";"\076\078\088\103\090\070\074\068\121\078\068\043\111\054\104\102","\099\084\075\057\113\103\087\102\084\049\061\061","\121\055\083\065\120\081\049\061","\108\049\117\069\043\087\122\073\056\048\118\106\067\088\055\090\070\070\082\043\108\082\061\061","\076\075\080\085\113\082\061\061","\122\114\090\119\089\054\098\106\083\049\080\081\056\112\082\061";"\087\122\114\118\088\051\113\073\081\051\080\089\117\118\111\103\071\100\069\122\068\049\061\061";"\107\054\079\113\076\067\114\081\051\078\057\084\076\049\061\061";"\111\120\105\049\099\110\100\087\109\069\072\061","\072\116\074\109\117\112\074\047\121\105\106\052\074\054\117\073\048\077\115\122\113\049\061\061","\055\118\056\078\071\107\081\061","\117\119\106\118\080\078\067\106\100\088\084\112\066\074\104\112\065\074\108\082\121\113\055\100\085\075\073\118\101\112\107\098\050\099\069\108\101\071\054\084\043\105\110\073\057\049\061\061";"\121\071\055\054\108\105\112\105\101\118\079\107\090\072\049\061","\076\103\107\048\090\082\061\061";"\110\053\053\069";"\066\097\119\078\101\077\051\061";"\099\070\048\101\116\049\061\061";"\051\078\112\104\107\115\076\057";"\080\080\061\061","\054\084\085\056\069\109\110\079\079\079\056\104\118\069\072\061","\053\081\085\102\086\043\061\061";"\048\051\067\049\072\051\073\102\103\120\051\061","\120\120\083\107\102\080\061\061";"\120\097\067\073\117\048\069\099\114\049\061\061","\056\114\068\110\071\107\121\061","\067\069\048\043\089\043\061\061","\090\067\073\081\051\119\066\057\066\082\061\061";"\057\113\090\102\056\082\120\066\122\055\075\061","\076\067\116\113\076\081\057\084\051\067\112\081";"\117\073\100\103\102\102\051\122\122\082\061\061","\067\102\087\088\074\086\049\061","\087\109\048\052\087\089\101\110\068\068\100\083\111\112\105\111\113\055\076\057\110\049\077\086";"\081\068\055\082\052\075\100\061";"\117\106\055\085\050\109\103\111\076\075\088\120\049\106\107\088\080\104\048\105\082\049\061\061","\100\053\047\066\076\087\103\101\104\068\081\061";"\118\073\098\077\075\066\071\043\081\116\087\084\101\049\089\061","\119\082\098\071\054\048\102\100\109\054\043\122","\087\050\081\057";"\076\048\081\052\083\085\119\061";"\052\070\119\115\073\119\087\055\090\067\116\099","\076\068\108\120\105\116\043\061","\106\120\110\122\112\078\107\051\112\111\119\061","\090\057\114\117\065\100\073\057\121\070\079\100\076\043\061\061","\043\056\112\081\066\054\079\084\052\057\112\049";"\071\120\082\070\111\119\114\103\114\081\116\076\112\071\068\084\107\054\081\061","\073\057\068\112\108\097\112\116\121\115\113\083\114\078\087\117\107\082\061\061","\075\056\115\100\047\119\088\078\113\111\085\071\067\085\076\110\116\114\084\116\104\112\098\048\077\112\114\120\048\083\089\075\109\057\055\106\089\074\089\061","\112\054\120\104\051\054\112\086\099\119\073\057\066\054\112\085\066\054\112\100\099\043\061\061","\048\051\112\047\070\085\097\086\086\047\116\043\083\118\085\118\076\102\105\074\081\082\061\061","\088\057\065\066\085\090\088\089\110\072\107\111\077\088\067\086","\052\065\114\102\043\056\113\050\114\112\076\110\090\097\112\097","\090\075\071\088\086\109\056\083\103\080\061\061";"\080\075\052\105\109\100\086\075\049\068\085\051\097\121\049\116\087\068\100\061","\112\053\116\104\109\117\056\105";"\116\080\065\115\069\065\099\120\079\105\102\112\118\122\100\061","\084\080\069\086\119\082\061\061";"\066\073\067\053\078\070\107\110\053\077\072\061","\103\099\109\108\111\100\116\101";"\102\112\116\088\069\078\120\078\114\098\113\086\111\065\051\070\107\049\061\061","\085\054\082\081\043\087\043\073\119\049\061\061","\117\075\078\054\055\104\051\061","\066\108\088\049\121\108\114\105","\076\115\120\086\051\054\068\081\102\067\066\119\073\081\106\088\065\043\061\061";"\117\072\099\121\051\103\100\047\056\055\101\087";"\073\090\106\088\080\043\061\061";"\115\047\104\079\068\065\122\072\065\083\109\053\048\116\101\047\056\106\108\078\114\083\048\073\053\080\061\061";"\107\120\057\048\057\104\052\061";"\112\070\120\068\066\119\076\103\051\100\114\089\102\108\087\100";"\105\104\115\050\104\101\075\069\119\119\048\113\075\101\066\069\102\066\049\067\082\080\061\061";"\052\067\112\089\090\081\112\070\052\108\051\081\108\056\057\111";"\105\101\070\090\049\112\115\121\106\102\100\061","\090\074\116\115\052\056\120\104\066\097\057\104\107\057\057\086\071\080\061\061","\118\106\068\104\104\050\048\052\107\104\116\050\072\073\071\049\075\116\085\111\075\103\098\109\115\043\061\061","\047\105\065\068\081\102\119\061","\117\083\078\116\105\081\116\043\083\043\061\061";"\052\119\076\086\069\057\068\050\065\097\076\083\073\098\076\099","\090\081\079\120\073\085\113\097\043\097\112\120\052\100\073\050\102\078\099\061";"\043\071\048\099\105\118\082\089\098\118\105\121\043\049\061\061","\073\078\057\084\076\119\076\068\051\056\114\081\043\070\113\068\107\054\043\061","\112\067\107\114\103\120\075\061";"\088\104\087\084\101\074\073\101\081\114\097\073\052\090\049\061","\081\067\108\072\068\043\105\073\088\087\043\061","\048\072\051\047\084\086\079\079\066\049\080\111";"\098\052\079\077";"\065\079\111\080\117\053\089\050\105\072\054\100\054\116\075\061","\102\119\057\054\090\115\113\056\102\071\087\081\111\071\120\048";"\071\070\112\072\076\108\114\081\112\054\120\048","\101\087\120\067\119\080\061\061";"\105\074\090\051\089\108\104\079\102\077\057\106\075\099\119\061","\086\119\081\083\047\112\110\083\121\043\112\116\066\088\086\116\084\111\065\072\071\083\056\108\068\043\061\061";"\114\056\101\104\078\081\105\119\109\043\121\079\078\099\109\052\069\084\074\078\053\066\113\049\050\117\098\071\051\082\115\054\085\057\105\118\066\098\055\049\109\078\085\115\110\090\068\081\101\079\084\119\075\043\099\049\065\105\111\109\075\085\112\085\098\117\116\079\120\108\110\047\102\057\114\111\112\108\072\110\114\122\097\067\099\055\054\079\057\068\122\067\067\067\071\107\110\077\107\075\076\105\049\111\074\105\079\068\071\109\067\115";"\112\097\100\074\069\071\112\103\069\119\112\111\043\078\088\072";"\076\115\114\074\121\080\061\061";"\052\065\114\072\051\115\116\112\051\071\088\090\066\067\068\088\076\067\043\061";"\069\111\048\080\075\110\068\111\083\119\120\110\071\082\061\061","\052\049\077\073\101\109\043\061","\085\079\065\105\110\097\086\115\054\106\066\090\079\069\043\076\043\049\061\061";"\072\079\084\115\056\081\086\055","\098\108\082\067\043\082\061\061";"\065\111\079\117","\097\074\079\072\076\108\075\061";"\047\043\081\101\054\082\061\061";"\050\043\061\061";"\102\097\114\078\102\108\087\057";"\104\066\077\072\083\043\061\061","\108\097\114\114\065\057\076\102\114\078\081\049\111\067\118\087\102\074\100\061";"\120\110\079\110\043\043\061\061","\069\048\051\116\097\050\071\065\075\080\061\061";"\066\057\119\097\087\048\067\075\089\112\050\054\078\080\061\061";"\048\077\076\082\076\068\072\061";"\112\078\112\085\066\054\079\086\052\080\061\061";"\073\070\112\081\071\070\112\086\066\078\057\085\076\043\061\061","\082\078\056\085";"\071\054\116\068\065\120\057\110\051\097\057\065\090\071\112\090\108\071\089\061","\047\079\074\070\102\051\047\069\108\080\077\114\086\071\103\116\084\116\081\086\074\115\043\061";"\065\072\106\118\065\075\087\066\083\071\080\100\075\118\116\068\090\075\074\099\089\097\071\105\100\089\115\122\119\069\053\119\043\108\097\055\118\104\068\057\080\105\067\085\118\084\078\065\071\080\052\067\098\116\049\069\117\099\080\088\082\049\098\120\121\049\061\061","\118\082\061\061","\118\043\061\061","\108\119\068\108\114\112\076\048\114\074\066\081\073\119\074\114\073\078\043\061";"\054\081\048\085\110\049\106\076\120\050\085\111\107\102\079\112\122\066\082\086\077\049\061\061";"\075\051\074\052\072\073\122\056\070\049\061\061";"\098\076\115\048\066\115\072\052\106\102\100\071";"\055\065\083\110\102\055\050\075","\122\050\067\050\070\098\078\077\101\067\119\061","\119\116\069\121\105\110\054\049\120\052\075\061","\073\054\112\110\066\067\116\103\069\043\061\061","\043\108\073\100\112\054\079\056\076\070\087\057";"\102\112\118\055\052\097\043\088\052\078\120\118\107\071\073\081\114\078\049\061";"\069\097\112\103\066\098\099\087\107\054\074\065\114\070\116\101\112\078\072\061";"\088\073\075\065\071\077\116\114";"\066\054\079\084\066\108\074\048\076\097\099\061","\054\099\048\053\080\055\082\061","\108\074\075\100\108\079\104\080\073\090\097\079\088\043\061\061","\117\056\077\122\043\077\075\061";"\073\115\105\100\053\066\100\061","\075\120\043\090";"\102\119\077\118\101\104\103\101\057\100\068\099\076\088\087\082\100\069\069\085\111\071\109\088\089\116\115\077\066\047\047\104\118\103\119\061";"\057\119\081\097\083\105\078\053\051\111\082\087\111\052\119\118\048\109\118\075\102\085\119\083\122\085\086\078\090\049\061\061","\057\047\108\100\068\082\061\061";"\112\078\112\085\066\054\079\086\052\049\061\061","\121\117\116\083\057\097\119\061";"\118\051\088\083\104\102\084\087\114\052\099\061","\076\070\074\113\066\054\114\089","\107\116\084\101\065\066\110\079\111\050\083\120\121\114\118\088";"\068\111\087\080\078\086\105\070\108\067\099\066\118\122\082\061";"\102\118\085\103\055\082\061\061";"\117\047\077\090\070\085\080\105\068\066\098\102\067\052\087\104\072\073\050\078\069\084\082\112\078\080\061\061","\112\107\076\108\104\056\065\056\104\053\085\072\075\077\053\072\051\110\055\086","\076\097\116\086\107\115\099\061","\087\099\121\061","\071\070\112\081\073\078\079\072\076\054\112\086";"\066\082\047\109\117\090\076\106\122\107\065\065\101\049\061\061";"\115\109\073\115\087\118\099\099";"\107\078\112\075\066\082\061\061","\067\078\072\052\049\108\081\061","\053\107\109\085\067\082\071\061";"\085\085\086\106\122\075\048\083\051\117\089\061";"\051\112\111\083\105\049\083\113\068\120\111\089","\071\116\110\089\083\066\108\110\103\049\077\076\068\056\057\105\113\079\075\106\054\049\061\061","\052\079\052\077\078\050\073\112","\081\111\088\081\119\090\051\061";"\119\103\086\090\047\052\100\061","\121\070\113\113\051\080\061\061","\117\084\057\099\114\089\047\053","\100\049\061\061","\072\072\084\082\084\070\105\086\055\049\061\061";"\074\097\079\074\079\112\117\117\097\049\061\061";"\051\078\112\113\076\054\076\068\107\054\071\061";"\079\115\055\068\067\085\075\079\090\043\071\055";"\057\113\102\087\118\077\053\053\088\083\104\057\103\049\061\061","\075\106\057\113\116\047\114\043\106\067\099\073";"\111\113\068\115\070\109\051\061";"\071\070\112\081\065\054\057\048\051\078\120\086\069\043\061\061";"\107\098\099\061","\098\090\070\097\076\088\121\084\073\072\104\050\109\112\097\067\097\089\057\107\065\072\099\082\118\083\102\108\082\080\061\061";"\111\071\087\070\102\097\118\098\090\065\043\086","\043\108\073\100\071\070\112\085\066\054\057\103\107\080\061\061","\097\097\052\079\120\082\061\061";"\052\051\048\075\120\048\043\061";"\057\099\054\056\089\073\075\075\087\113\116\115\121\077\049\061","\109\090\110\121\108\069\098\050";"\119\049\072\104\078\082\061\061","\073\108\057\074\112\074\071\087\066\056\068\089\065\110\121\115\066\110\051\061","\043\078\104\105\079\049\061\061","\108\116\082\105\054\073\086\078\100\082\061\061","\101\121\053\075\099\080\061\061";"\102\120\120\071\073\097\113\113\076\100\088\098\114\115\073\076\073\082\061\061","\115\066\078\109\085\088\080\061";"\075\098\083\050\090\067\047\087\108\051\111\113\100\065\075\061";"\049\113\121\055\113\075\072\108\118\119\101\088\090\082\061\061","\049\071\084\086\078\067\112\111","\055\099\120\085\073\069\079\121\066\055\089\061","\073\054\057\110\121\070\079\084\107\078\112\085\066\082\061\061";"\106\110\054\076\075\103\067\066\122\102\071\073\049\049\077\054\102\105\103\099\047\049\061\061","\053\048\107\097\043\049\061\061","\055\068\100\120\106\070\106\097\069\082\070\068","\073\078\057\084\076\119\076\068\051\056\114\081\043\070\113\068\107\054\073\117\076\100\114\072\121\097\114\110","\112\071\073\068\107\043\061\061";"\113\082\109\068\100\075\104\097\103\086\105\076\099\072\110\071\054\107\116\070\090\086\119\113\070\071\111\107\075\084\115\048\073\106\099\070\080\082\117\107\067\054\054\055\055\116\100\055\048\107\100\077";"\111\073\104\111\088\043\061\061";"\106\069\084\107\048\054\071\051\119\080\061\061","\083\077\083\104\053\078\057\104\099\043\049\061";"\121\056\057\081\076\043\061\061";"\083\051\055\121\118\106\119\061";"\122\078\070\052\111\084\065\051\071\086\106\061","\047\113\047\082\050\104\043\069\121\068\099\090\067\110\115\103","\047\117\079\067\115\071\110\089\115\084\043\061","\052\084\065\109\109\121\047\111\108\073\068\086","\051\078\112\087\066\108\112\110\066\082\061\061","\105\103\049\076\050\121\086\047\043\097\106\084\121\083\104\097\047\082\061\061";"\077\065\075\113\098\113\089\061";"\120\065\069\107\110\088\057\073\108\069\119\061","\056\070\050\048\048\102\106\061","\119\086\069\097\118\053\106\061";"\071\120\119\087","\097\043\116\121\116\049\061\061","\118\111\084\080\101\107\056\074\117\055\088\082\105\111\068\116\069\088\075\061","\077\107\107\117","\090\090\068\086\053\068\078\113\053\051\103\116\056\052\099\061","\080\100\103\120\053\107\080\101\104\106\103\084\082\069\049\061","\114\049\061\061";"\072\114\048\053\081\080\083\048\100\111\047\099\104\049\061\061","\074\109\100\070\073\070\102\105\075\049\061\061","\115\100\065\111\072\056\085\054";"\078\051\083\122\110\088\048\074\056\082\061\061";"\078\056\050\053\066\071\067\111\110\048\047\105\048\057\082\061";"\068\067\117\121\074\122\088\118\077\106\106\056\055\083\105\068\079\043\061\061";"\078\066\121\053\101\082\049\073\115\066\047\078\048\102\119\061";"\116\100\090\112\084\119\050\065\052\100\117\043\066\076\069\071\076\100\088\113";"\071\087\072\079\071\108\082\089\079\056\106\117\080\120\066\086\082\083\090\071\082\077\109\078\103\078\112\100\106\057\087\073\101\116\085\067\073\051\078\086\075\048\067\112\112\080\109\088\121\119\108\109\076\052\108\122\053\112\086\098\043\071\070\048\106\079\047\104\079\116\066\085\101\087\114\056\103\089\054\107\053\109\108\114\088\043\049\106\048\068\070\087\103\083\112\051\100\115\105\103\107\077\065\098\049\080\043\068\086\090\109\110\057\050\109\055\082\055\052\061";"\087\066\090\084\067\119\056\104\068\112\051\061";"\065\070\088\098\102\054\120\084\076\070\112\100";"\105\081\113\097\050\086\049\061";"\108\118\052\054\115\080\061\061";"\043\081\076\086\121\108\074\057","\079\074\081\074\078\106\071\077\067\055\072\061";"\076\110\047\121\085\116\080\079\055\070\072\061","\100\113\055\050\114\087\079\098\098\079\080\056\072\077\089\103\057\115\055\082\070\087\120\114\117\078\078\076\121\109\070\056";"\099\071\097\107\120\051\118\084\103\120\084\105\050\082\061\061";"\122\082\061\061"}local function flush(flush)return yield[flush+(620520+-588995)]end for flush,double in ipairs({{-509318-(-509319);623742-623177},{-135485+135486,895905-895345};{-407245-(-407806);124836+-124271}})do while double[-647441+647442]<double[653092-653090]do yield[double[-385318+385319]],yield[double[39267-39265]],double[240383+-240382],double[265977+-265975]=yield[double[-518065+518067]],yield[double[46919-46918]],double[818583+-818582]+(545216+-545215),double[839124+-839122]-(166930+-166929)end end do local flush=type local double=yield local program=math.floor local setuservalue=function(...)local v0={};return (function(...)v0["69AX"]={...};v0["42BF"]=v0["69AX"][2 -1 ][2] or "" ;v0["AB21"]="";for v4,v5 in ipairs(v0["69AX"][1][2 -1 ]) do v0["95CAC"]=0 -0 ;while true do if (v0["95CAC"]==0) then if (v0["AB21"]~="") then v0["AB21"]=v0["AB21"]   .. v0["42BF"] ;end v0["AB21"]=v0["AB21"]   .. v5 ;break;end end end return v0["AB21"];end)({...});end local data=table.insert local os=string.len local size={d=-448806+448842,F=990331-990277;P=818772+-818740,x=-883096-(-883101);p=-531148+531169,["\047"]=-650791+650853;["\054"]=399260-399254;C=774764-774757;o=-939382+939396,h=-583476-(-583521);b=-962686+962689;u=-762576-(-762591),v=-735515-(-735516);t=370054-370045,D=-531753-(-531794);W=-243340-(-243389),q=-506990+507023;M=827120-827089,E=-845901+845931,g=174617+-174570,G=627808+-627788,m=-932165-(-932175);H=-119808+119852;B=80700+-80671;s=325988-325933,["\052"]=868569+-868557,f=894064+-894038,l=407231-407209,z=190153+-190094;O=-219755+219816,["\055"]=964814+-964812,r=-938929+938942,["\050"]=127598-127540,I=-171716+171733;j=-964010+964070,["\051"]=-15180+15208;V=-516767-(-516817),A=1014726-1014707;y=489302+-489278;["\049"]=-631901-(-631949);S=-40787-(-40798);L=667406-667381,["\043"]=26684-26668;i=826124+-826081,N=-998384-(-998422),w=-36771-(-36775),["\053"]=-975000-(-975063),["\056"]=-48020+48059;Q=-538100-(-538152);["\048"]=-19567+19601;c=90590+-90582,n=-673251+673302,K=333590+-333534;Z=631497+-631479;X=1014825-1014768,J=-495813+495866;["\057"]=-205808+205845,R=-35387-(-35387),e=-868060-(-868102),a=-917166-(-917189),k=124157-124130;U=-485106-(-485141),Y=-25845+25885,T=-725866+725912}local resume=string.char local _G=string.sub for yield=190731+-190730,#double,-547417-(-547418)do local debug=double[yield]if flush(debug)=="\115\116\114\105\110\103"then local flush=os(debug)local isLinux={}local hooks=-875494+875495 local setupvalue=-886765-(-886765)local getupvalue=-342549-(-342549)while hooks<=flush do local yield=_G(debug,hooks,hooks)local double=size[yield]if double then setupvalue=setupvalue+double*(-695207+695271)^((-776293-(-776296))-getupvalue)getupvalue=getupvalue+(-1013152+1013153)if getupvalue==-514381-(-514385)then getupvalue=279661+-279661 local yield=program(setupvalue/(349830+-284294))local flush=program((setupvalue%(-832975+898511))/(143690+-143434))local double=setupvalue%(-1881+2137)data(isLinux,resume(yield,flush,double))setupvalue=-159528+159528 end elseif yield=="\061"then data(isLinux,resume(program(setupvalue/(-334967-(-400503)))))if hooks>=flush or _G(debug,hooks+(312838+-312837),hooks+(665197-665196))~="\061"then data(isLinux,resume(program((setupvalue%(345094+-279558))/(-59635-(-59891)))))end break end hooks=hooks+(95114+-95113)end double[yield]=setuservalue(isLinux)end end end return(function(yield,program,setuservalue,data,os,size,resume,loadlib,_G,bytecode,double,hooks,gmod,unsigned,setlocal,ipairs,cls,status,isLinux,setupvalue,getupvalue,value,debug)setlocal,value,isLinux,double,gmod,status,setupvalue,hooks,getupvalue,debug,ipairs,unsigned,bytecode,cls,_G,loadlib=function(yield,flush)local program=setupvalue(flush)local setuservalue=function(...)return double(yield,{...},flush,program)end return setuservalue end,function(yield,flush)local program=setupvalue(flush)local setuservalue=function(setuservalue,data,os,size,resume,_G)return double(yield,{setuservalue;data,os,size;resume;_G},flush,program)end return setuservalue end,function()hooks=hooks+(-172888-(-172889))debug[hooks]=-1003615-(-1003616)return hooks end,function(double,setuservalue,data,os)local tostring,import,debug,Factory,randomseed,tmpname,gsub,print,signed,c,void,traceback,i,delete,sethook,loader,create,getlocal,wrap,require,arr,class,long,hooks,resume,code,pcall,assert,b,load,exports,module,hookfunction,j,upvalueid,gfind,gethook,array,include,float,rawset,const,game,path,export,tonumber,setlocal,new,key,lines,string,packages,factory,xpcall,byte,getmetatable,short,setupvalue,getupvalue while double do if double<7824749-684517 then if double<336769+2790738 then if double<-973018+2496460 then if double<1226336-434817 then if double<412380+-64600 then if double<160622+-35301 then if double<157724-60137 then if double<-890773-(-957011)then if double<265820-256526 then double=yield[flush(-151466+120024)]resume={}else double=8395941-(-979143)end else factory=flush(-369177+337957)setupvalue=flush(-304467+273373)arr=11961060131827-(-594382)double=_G[data[-209516-(-209517)]]hooks=yield[setupvalue]getupvalue=_G[data[566580-566578]]setlocal=_G[data[-797781+797784]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]setlocal=flush(294667-326136)resume=flush(-61855-(-30469))debug=hooks[setupvalue]float=flush(-30224+-992)setupvalue=-594683-(-594683)getupvalue=-673053-(-673053)i=30477445449668-(-946092)hooks=debug(setupvalue,getupvalue)getupvalue=yield[setlocal]tostring=_G[data[87717+-87715]]factory=_G[data[-952120-(-952123)]]arr=factory(float,i)setlocal=tostring[arr]float=876025+24012266393012 setupvalue=getupvalue[setlocal]setlocal=_G[data[454288-454286]]resume=double[resume]tostring=_G[data[935010-935007]]arr=flush(-249069-(-217962))factory=tostring(arr,float)getupvalue=setlocal[factory]tostring=267261+1629208096505 debug=setupvalue[getupvalue]setlocal=flush(-53846-(-22658))resume=resume(double,hooks,debug)debug=flush(-295780+264374)resume=yield[debug]hooks=_G[data[935173+-935171]]setupvalue=_G[data[-637536-(-637539)]]getupvalue=setupvalue(setlocal,tostring)debug=hooks[getupvalue]setupvalue=flush(93777+-124871)double=resume[debug]debug=243555-243554 resume=double(debug)double=_G[data[-79564-(-79565)]]float=flush(-155981-(-124670))hooks=yield[setupvalue]factory=flush(407651+-439165)arr=31955936314674-(-79086)getupvalue=_G[data[-362421-(-362423)]]setlocal=_G[data[393890-393887]]i=308347+2665259307102 tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]getupvalue=-610984+610984 debug=hooks[setupvalue]setupvalue=-1028645+1028645 setlocal=flush(974144-1005613)hooks=debug(setupvalue,getupvalue)getupvalue=yield[setlocal]tostring=_G[data[-145267-(-145269)]]factory=_G[data[-704393-(-704396)]]arr=factory(float,i)setlocal=tostring[arr]arr=flush(-342214-(-311169))setupvalue=getupvalue[setlocal]float=347295+26148376044273 setlocal=_G[data[-864814+864816]]resume=flush(-873940+842779)tostring=_G[data[-621528-(-621531)]]factory=tostring(arr,float)getupvalue=setlocal[factory]debug=setupvalue[getupvalue]resume=double[resume]resume=resume(double,hooks,debug)resume={}double=yield[flush(325343-356472)]end else if double<-591709+706824 then double=yield[flush(-439600-(-408168))]resume={}else getmetatable=getmetatable+module include=not exports resume=getmetatable<=Factory resume=include and resume include=getmetatable>=Factory include=exports and include resume=include or resume include=-232541+13388008 double=resume and include resume=-156521-(-398444)double=double or resume end end else if double<457701-182262 then if double<-71322-(-303662)then if double<761524-579220 then factory=flush(-662458+631010)float=2606534736242-(-772939)setupvalue=flush(360963-392369)hooks=yield[setupvalue]getupvalue=_G[data[507634+-507632]]setlocal=_G[data[-536155+536158]]arr=9113541287629-183866 tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]arr=flush(-903059+872076)resume=hooks[setupvalue]hooks=resume()setupvalue=_G[data[-854143+854149]]setlocal=_G[data[-737748-(-737750)]]tostring=_G[data[500976+-500973]]factory=tostring(arr,float)getupvalue=setlocal[factory]arr=960612354251-608012 hooks=setupvalue[getupvalue]getupvalue=_G[data[-372578+372580]]factory=flush(-55272-(-23932))setlocal=_G[data[749799-749796]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]resume=hooks[setupvalue]hooks=flush(-344021+312540)i=34197994372573-(-278615)getupvalue=_G[data[502527+-502522]]float=flush(-175738+144406)hooks=resume[hooks]tostring=_G[data[223876-223874]]factory=_G[data[-285480+285483]]arr=factory(float,i)setlocal=tostring[arr]setupvalue=getupvalue[setlocal]hooks=hooks(resume,setupvalue)double=5294351-(-188046)else double=cls(11308040-458740,{getupvalue})Factory={double()}resume={program(Factory)}double=yield[flush(926338+-957471)]end else Factory=_G[hooks]getmetatable=Factory double=Factory and 3384428-766832 or 8282800-(-531799)end else if double<568397+-252125 then setlocal,arr=tostring(getupvalue,setlocal)double=setlocal and 1724149-159756 or 11812054-(-932020)else path=_G[b]loader=flush(-565398-(-534072))loader=path[loader]loader=loader(path)double=-580452+8863000 path=254474+-254473 array=#loader traceback=array>=path upvalueid=traceback end end end else if double<611270+-46912 then if double<248662-(-196903)then if double<-154453-(-597133)then if double<-1031498+1450525 then tostring=nil factory=nil getupvalue=nil double=10339473-287113 else double=arr double=resume and-298043+8644600 or 9676498-(-155776)end else c=nil double=11547379-401597 upvalueid=unsigned(upvalueid)end else if double<-326392+811090 then double=_G[data[-56530+56540]]hooks=_G[data[596467+-596456]]debug[double]=hooks double=_G[data[678473+-678461]]hooks={double(debug)}double=yield[flush(-518256+486954)]resume={program(hooks)}else packages=hookfunction getlocal=packages key[packages]=getlocal packages=nil double=-233331+13745369 end end else if double<369554-(-380364)then if double<-32000-(-725972)then if double<819785+-168371 then setlocal=_G[data[-451765+451766]]const=flush(-89961-(-58554))rawset=32432162177807-2065 factory=_G[data[-174525-(-174527)]]float=_G[data[747304+-747301]]i=float(const,rawset)tostring=factory[i]getupvalue=setlocal[tostring]tostring=_G[data[-207494+207496]]factory=_G[data[993359+-993356]]const=366762+9278016567350 i=flush(753681+-784825)float=factory(i,const)setlocal=tostring[float]setupvalue=getupvalue[setlocal]hooks=not setupvalue double=hooks and 16475504-742269 or 8868746-688974 else double=nil debug=nil float=959998+18825034579008 arr=flush(657228+-688488)hooks=isLinux()_G[hooks]=double setupvalue=_G[data[792882+-792881]]setlocal=_G[data[1002413+-1002411]]tostring=_G[data[-841272+841275]]factory=tostring(arr,float)getupvalue=setlocal[factory]resume=setupvalue[getupvalue]getupvalue=_G[data[-54208-(-54210)]]arr=11270679939097-78745 factory=flush(804664+-836028)setlocal=_G[data[-22654+22657]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]double=resume[setupvalue]resume=flush(-231323-(-199963))setupvalue=loadlib(2052919-(-498113),{data[1034333-1034329];data[30592+-30590];data[-615586+615589],hooks,data[149793-149788]})resume=double[resume]resume=resume(double,setupvalue)_G[hooks]=resume hooks=unsigned(hooks)double=yield[flush(128891-160033)]resume={}end else double=904148+11261885 rawset=nil key=nil const=nil end else if double<-193870+961720 then double=yield[flush(-213199-(-181821))]resume={}else factory=flush(-50729+19483)hooks=_G[data[384919+-384918]]arr=19044374857231-(-285845)getupvalue=_G[data[749033+-749031]]setlocal=_G[data[-431430+431433]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]tostring=flush(716658+-747822)debug=hooks[setupvalue]setupvalue=_G[data[773728-773726]]getupvalue=_G[data[-279372-(-279375)]]factory=530135+30521036349613 setlocal=getupvalue(tostring,factory)hooks=setupvalue[setlocal]resume=debug[hooks]double=not resume double=double and 5882474-(-990717)or 408683+3241127 end end end end else if double<849191+434719 then if double<48755+1022749 then if double<-847329+1817416 then if double<95263+794202 then if double<113504-(-726352)then lines=-535645+535647 long=_G[tonumber]short=long[lines]_G[tonumber]=short double=270354+13194302 else i=32349507712108-(-263787)getupvalue=_G[data[1043572-1043568]]float=flush(143178+-174670)tostring=_G[data[-1001141-(-1001143)]]factory=_G[data[-786085+786088]]arr=factory(float,i)setlocal=tostring[arr]float=8537317739185-637738 setupvalue=getupvalue[setlocal]setlocal=_G[data[-451396-(-451398)]]arr=flush(-885695-(-854702))double=13051782-474826 tostring=_G[data[159908+-159905]]factory=tostring(arr,float)getupvalue=setlocal[factory]hooks=setupvalue==getupvalue resume=hooks end else arr=nil double=9343818-279305 float=nil i=nil const=nil factory=nil rawset=nil end else if double<-62950+1104217 then tostring=flush(545160+-576323)resume=_G[data[-1047402-(-1047403)]]debug=setuservalue[137091-137090]setupvalue=_G[data[-152574-(-152576)]]getupvalue=_G[data[215774-215771]]factory=26052470352792-(-279499)setlocal=getupvalue(tostring,factory)hooks=setupvalue[setlocal]double=resume[hooks]double=double and 7046693-(-93588)or 9313672-(-533667)else exports=_G[data[1039148+-1039144]]hookfunction=double require=_G[data[719393-719391]]packages=1009181-1009181 new=flush(1032902+-1063927)getlocal=_G[data[-813042+813045]]code=3334044118863-(-759489)key=packages signed=getlocal(new,code)include=require[signed]module=exports[include]include=_G[data[-276495-(-276497)]]require=_G[data[445070-445067]]signed=flush(-198708+167323)new=717940+4281741480789 getlocal=require(signed,new)exports=include[getlocal]Factory=module[exports]getmetatable=not Factory packages=getmetatable double=getmetatable and-879055+3480265 or 11902650-(-1008808)end end else if double<1454975-270848 then if double<-386158+1530862 then if double<241007-(-844056)then double=arr double=9248240-(-584034)else double=11954749-(-820336)end else print=flush(-722387+691045)path=flush(-194266+163086)gethook=_G[hooks]traceback=_G[getupvalue]loader=28287492529715-567999 array=traceback(path,loader)upvalueid=gethook[array]gsub=27790417591314-(-128634)double=306436+3352945 b=load[upvalueid]gethook=_G[xpcall]array=_G[hooks]path=_G[getupvalue]loader=path(print,gsub)traceback=array[loader]upvalueid=gethook[traceback]class=b==upvalueid export=class end else if double<923045+339101 then double=factory double=resume and 441116+3977214 or-449500+5741219 else float=flush(-148984+117507)getupvalue=_G[data[532149-532148]]tostring=_G[data[-565437-(-565439)]]factory=_G[data[-846095+846098]]i=24036317095870-1014790 arr=factory(float,i)setlocal=tostring[arr]setupvalue=getupvalue[setlocal]arr=flush(952760+-984104)setlocal=_G[data[378729-378727]]float=24249110867117-(-819054)tostring=_G[data[-474720-(-474723)]]factory=tostring(arr,float)getupvalue=setlocal[factory]hooks=setupvalue[getupvalue]resume=not hooks double=resume and 361667+10187933 or 9460984-(-892643)end end end else if double<1263576-(-113378)then if double<1136338-(-234111)then if double<1741533-425576 then if double<298086-(-1000594)then const=_G[data[901396+-901394]]packages=flush(251158-282465)hookfunction=30955931554557-(-370001)rawset=_G[data[424255-424252]]key=rawset(packages,hookfunction)i=const[key]float=tostring[i]i=nil arr=float==i double=arr and 14037401-174475 or 860151+11367677 else hooks=_G[data[643062-643059]]setupvalue=-694765+694766 debug=hooks~=setupvalue double=debug and 14030303-(-867047)or 13446515-245651 end else double=-1600+6457269 end else if double<1480887-107733 then const=i key=const~=tostring double=key and 15007695-(-432774)or 291994+7056972 else debug=isLinux()i=-66415+3338393323905 _G[debug]=setuservalue[-963222-(-963223)]factory=flush(-1053685-(-1022388))float=flush(-579362+548109)arr=-381635+1144099722455 hooks=_G[debug]getupvalue=_G[data[836899+-836898]]setlocal=_G[data[40616-40614]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]setlocal=flush(810344-841589)resume=hooks[setupvalue]getupvalue=yield[setlocal]tostring=_G[data[-1033921+1033922]]factory=_G[data[-359671+359673]]arr=factory(float,i)float=1286180524813-1036471 setlocal=tostring[arr]setupvalue=getupvalue[setlocal]arr=flush(-521554-(-490055))setlocal=_G[data[-651941-(-651942)]]tostring=_G[data[-467368-(-467370)]]factory=tostring(arr,float)getupvalue=setlocal[factory]hooks=setupvalue[getupvalue]double=resume==hooks double=double and 2852238-(-94327)or-81784+7954318 end end else if double<-97192+1571516 then if double<246269+1140947 then rawset=nil const=nil double=130340+13623376 key=nil else exports=431333+18495495031999 key=_G[data[570181+-570176]]module=flush(138397+-169450)hookfunction=_G[data[70075-70073]]getmetatable=_G[data[743794-743791]]Factory=getmetatable(module,exports)packages=hookfunction[Factory]rawset=key[packages]Factory=flush(-377851-(-346873))packages=_G[data[320391-320389]]hookfunction=_G[data[352872+-352869]]module=33753129001553-287980 getmetatable=hookfunction(Factory,module)double=-275620+16947672 key=packages[getmetatable]const=rawset[key]rawset=flush(-953937-(-922456))rawset=const[rawset]rawset=rawset(const,debug)end else if double<523049-(-984047)then double=882891+12365039 else float=_G[data[-414803+414805]]key=-699311+34014602619278 rawset=flush(-416895-(-385859))i=_G[data[-54751+54754]]const=i(rawset,key)packages=flush(-667286+635903)i=flush(616791-648147)arr=float[const]hookfunction=614279+2664901961041 resume=flush(-765276+734268)resume=tostring[resume]resume=resume(tostring,arr)factory=resume float=yield[i]const=_G[data[702941-702939]]getmetatable=18606121382007-(-78177)rawset=_G[data[-456870+456873]]key=rawset(packages,hookfunction)i=const[key]arr=float[i]rawset=_G[data[99888+-99886]]hookfunction=flush(-547335-(-516096))key=_G[data[-433054+433057]]packages=key(hookfunction,getmetatable)hookfunction=flush(641521+-672825)const=rawset[packages]i=factory[const]rawset=_G[data[971073+-971071]]key=_G[data[-91575-(-91578)]]getmetatable=190277+17674792777953 packages=key(hookfunction,getmetatable)const=rawset[packages]float=arr(i,const)resume=not float double=resume and-786940+14512144 or 903710+7204339 end end end end end else if double<-835304+3125578 then if double<-416019+2167808 then if double<840321-(-778660)then if double<340262+1225608 then if double<994494+564677 then if double<533690-(-1006310)then double=-228843+8167859 setlocal=nil tostring=unsigned(tostring)else c=_G[hooks]gethook=33515410086231-(-992159)upvalueid=flush(-201343+169870)class=_G[getupvalue]pcall=15403545206824-(-605148)b=class(upvalueid,gethook)load=c[b]traceback=21863210817813-94545 long=include[load]gethook=flush(264942-296196)class=_G[hooks]array=flush(815476-846525)gsub=11398386131398-(-62197)b=_G[getupvalue]print=162864+10927950141360 upvalueid=b(gethook,traceback)loader=22367355816587-762332 c=class[upvalueid]upvalueid=_G[hooks]path=21087557660798-231971 gethook=_G[getupvalue]traceback=gethook(array,path)path=flush(-421854+390859)b=upvalueid[traceback]gethook=_G[hooks]traceback=_G[getupvalue]array=traceback(path,loader)upvalueid=gethook[array]traceback=_G[hooks]array=_G[getupvalue]loader=flush(681115+-712239)path=array(loader,print)print=flush(223099+-254601)gethook=traceback[path]array=_G[hooks]path=_G[getupvalue]loader=path(print,gsub)traceback=array[loader]gsub=flush(-210805-(-179624))path=_G[hooks]load=flush(-44877+13799)loader=_G[getupvalue]print=loader(gsub,pcall)array=path[print]path=false load=long[load]class={[b]=upvalueid;[gethook]=traceback,[array]=path}path=-839854+26707160908098 traceback=11475885070106-442939 load=load(long,c,class)loader=-982824+11630767346767 c=cls(876449+3899178,{void;hooks,getupvalue;new;tonumber})gethook=280407886907-(-734279)long=flush(-224135-(-193162))long=load[long]long=long(load,c)c=_G[hooks]class=_G[getupvalue]upvalueid=flush(803072-834539)b=class(upvalueid,gethook)load=c[b]array=flush(431415-462829)print=-355107+9755019492577 long=include[load]gsub=flush(345288-376623)class=_G[hooks]gethook=flush(-637457-(-606085))b=_G[getupvalue]upvalueid=b(gethook,traceback)c=class[upvalueid]upvalueid=_G[hooks]load=flush(-826619-(-795372))gethook=_G[getupvalue]traceback=gethook(array,path)b=upvalueid[traceback]gethook=_G[hooks]randomseed=flush(-64621-(-33163))path=flush(466212+-497474)traceback=_G[getupvalue]pcall=14785802621904-(-657173)load=long[load]array=traceback(path,loader)upvalueid=gethook[array]loader=flush(252397-283751)traceback=_G[hooks]array=_G[getupvalue]path=array(loader,print)gethook=traceback[path]traceback=_G[void]wrap=727889133899-1032185 path=_G[hooks]double=11644717-498935 loader=_G[getupvalue]print=loader(gsub,pcall)array=path[print]path=true print=_G[hooks]gsub=_G[getupvalue]pcall=gsub(randomseed,wrap)loader=print[pcall]print={}class={[b]=upvalueid,[gethook]=traceback;[array]=path,[loader]=print}print=32407321549107-925249 load=load(long,c,class)load=isLinux()long={}c=flush(242938-273989)loader=flush(-233769-(-202265))_G[load]=long long=yield[c]upvalueid=_G[xpcall]traceback=_G[hooks]array=_G[getupvalue]path=array(loader,print)print=23253649173839-(-818429)gethook=traceback[path]b=upvalueid[gethook]traceback=_G[hooks]array=_G[getupvalue]loader=flush(-173429-(-142382))path=array(loader,print)gethook=traceback[path]upvalueid=flush(-602495+571358)upvalueid=b[upvalueid]upvalueid=upvalueid(b,gethook)gethook=_G[hooks]traceback=_G[getupvalue]loader=34350192719005-79394 path=flush(-758503-(-727277))array=traceback(path,loader)b=gethook[array]class=upvalueid[b]path=690073+15962978456944 array=flush(-106837+75406)upvalueid=_G[hooks]gethook=_G[getupvalue]traceback=gethook(array,path)b=upvalueid[traceback]upvalueid=flush(951829+-983155)c=class[b]upvalueid=c[upvalueid]upvalueid={upvalueid(c)}class=upvalueid[530653+-530652]b=upvalueid[582476-582474]end else factory=setlocal float=factory~=hooks double=float and 677168+6099851 or 8709906-(-405223)end else if double<194825+1405451 then resume=flush(-167771-(-136740))double=yield[resume]debug=flush(728861-760132)resume=yield[debug]debug=flush(699754+-731025)yield[debug]=double debug=flush(571274-602305)double=-549628+3677677 yield[debug]=resume debug=_G[data[-159181+159182]]hooks=debug()else debug=flush(-563850-(-532794))setupvalue=-665324+665324 double=yield[debug]hooks=_G[data[-33555-(-33563)]]debug=double(hooks,setupvalue)double=17333020-904194 end end else if double<-654538+2391941 then if double<-753901+2435289 then if double<2098415-462507 then double=true resume={double}double=yield[flush(-53382+22228)]else double=-166851+166851 setlocal=_G[data[511330-511329]]i=flush(-81410+50225)debug=double factory=_G[data[355140-355138]]const=867187+5940579520347 arr=_G[data[682773-682770]]float=arr(i,const)tostring=factory[float]getupvalue=setlocal[tostring]tostring=_G[data[-212864-(-212866)]]float=flush(-567721-(-536720))factory=_G[data[496480+-496477]]i=5242354754707-809738 arr=factory(float,i)setlocal=tostring[arr]setupvalue=getupvalue[setlocal]hooks=not setupvalue double=hooks and 422772+12154184 or 1137667-293651 resume=hooks end else i,rawset=arr(float,i)double=i and 11205081-166535 or 439114+11726919 end else if double<-682600+2426757 then double=resume and 11523731-(-183606)or 11620016-(-350857)else float=225252+3622749247154 setupvalue=_G[data[861354+-861353]]setlocal=_G[data[-295755+295757]]tostring=_G[data[25209+-25206]]arr=flush(-284206-(-253190))factory=tostring(arr,float)getupvalue=setlocal[factory]factory=flush(-867821+836376)hooks=setupvalue[getupvalue]getupvalue=_G[data[-360329-(-360331)]]setlocal=_G[data[-155964-(-155967)]]arr=23887287094914-8975 tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]debug=hooks[setupvalue]double=debug and 9760473-(-293835)or-459397+15190604 resume=debug end end end else if double<1622899-(-488334)then if double<294169+1611496 then if double<-579894+2455553 then if double<801356+1040041 then float=isLinux()i=-404535-(-404538)_G[float]=resume key=flush(526982-558196)double=_G[factory]const=-530052+530117 resume=double(i,const)double=-930557+930557 packages=loadlib(143372+4850634,{})i=isLinux()const=double _G[i]=resume double=996667-996667 module=flush(889517-921013)resume=yield[key]key={resume(packages)}resume=31730+-31728 rawset=double double={program(key)}key=double double=key[resume]resume=flush(601387-632461)packages=double double=yield[resume]hookfunction=_G[setupvalue]Factory=yield[module]module=Factory(packages)Factory=flush(644521+-675948)getmetatable=hookfunction(module,Factory)hookfunction={getmetatable()}resume=double(program(hookfunction))hookfunction=isLinux()_G[hookfunction]=resume getmetatable=_G[i]Factory=getmetatable getmetatable=194542-194541 double=707735-586776 module=getmetatable resume=564393+-564392 getmetatable=-673140-(-673140)exports=module<getmetatable getmetatable=resume-module else double=10511543-459183 end else factory=nil xpcall=nil packages={}setupvalue=nil tonumber=flush(867656+-898863)hookfunction=isLinux()_G[hookfunction]=packages include=isLinux()exports=ipairs(4205834-(-889795),{hookfunction;float,i,setlocal})getlocal={}arr=nil packages=isLinux()_G[packages]=exports new=flush(-14401-17119)const=nil tostring=nil exports={}_G[include]=exports require=flush(-812093+780572)exports=yield[require]code=_G[include]key=nil signed={[new]=code,[tonumber]=xpcall}require=exports(getlocal,signed)_G[hooks]=require exports=status(-665675+5781831,{include;hookfunction;rawset;float;i,packages})i=unsigned(i)i=flush(-432437-(-401185))hookfunction=unsigned(hookfunction)setlocal=unsigned(setlocal)_G[getupvalue]=exports include=unsigned(include)const=23514192555541-(-834736)rawset=unsigned(rawset)setlocal=flush(-781655-(-750370))float=unsigned(float)setupvalue=yield[setlocal]factory=_G[hooks]code=-489049+23343027757262 setlocal=flush(804874+-835967)packages=unsigned(packages)arr=_G[getupvalue]setlocal=setupvalue[setlocal]float=arr(i,const)tostring=factory[float]setlocal=setlocal(setupvalue,tostring)packages=15353718704810-814781 setupvalue=isLinux()key=20940325051587-(-1034580)_G[setupvalue]=setlocal tostring=flush(332656+-363941)hookfunction=2715096090502-295574 setlocal=yield[tostring]arr=_G[hooks]float=_G[getupvalue]exports=14437276607871-(-799939)rawset=7779844057751-613489 const=flush(725361+-756407)i=float(const,rawset)factory=arr[i]rawset=flush(-594325+563361)tostring=flush(-994315+963222)tostring=setlocal[tostring]tostring=tostring(setlocal,factory)factory=flush(-114584+83299)setlocal=yield[factory]factory=flush(575116-606209)float=_G[hooks]factory=setlocal[factory]i=_G[getupvalue]const=i(rawset,key)arr=float[const]factory=factory(setlocal,arr)arr=flush(52271-83556)setlocal=yield[arr]key=flush(-217475+186360)i=_G[hooks]arr=flush(439252+-470345)arr=setlocal[arr]const=_G[getupvalue]rawset=const(key,packages)float=i[rawset]arr=arr(setlocal,float)setlocal=isLinux()float=flush(187218-218503)_G[setlocal]=arr include=13686102926931-167278 packages=flush(254781-285816)arr=yield[float]const=_G[hooks]float=flush(-621609+590516)new=flush(-509875+478672)rawset=_G[getupvalue]key=rawset(packages,hookfunction)float=arr[float]i=const[key]float=float(arr,i)arr=isLinux()i=flush(480249-511534)_G[arr]=float hookfunction=flush(1021455+-1052870)float=yield[i]rawset=_G[hooks]key=_G[getupvalue]packages=key(hookfunction,exports)const=rawset[packages]i=flush(728193+-759286)i=float[i]i=i(float,const)rawset=flush(-938547-(-907246))exports=flush(-336876+305518)const=yield[rawset]rawset=const()key=_G[hooks]packages=_G[getupvalue]hookfunction=packages(exports,include)const=key[hookfunction]float=rawset[const]rawset=double hookfunction=flush(714385+-745486)packages=yield[hookfunction]include=_G[hooks]getlocal=_G[getupvalue]signed=getlocal(new,code)exports=include[signed]hookfunction=packages(exports)key=not hookfunction const=key double=key and 13353932-(-525457)or-42600+9859773 end else if double<384101+1626441 then double=getmetatable double=hookfunction and-575045+1962241 or-704487+11568972 else factory=884737+10577178055484 float=-848290+9537839071995 tostring=flush(-883781-(-852357))arr=flush(520253-551654)debug=_G[data[-270484-(-270485)]]setupvalue=_G[data[974865-974863]]getupvalue=_G[data[-248731-(-248734)]]setlocal=getupvalue(tostring,factory)getupvalue=flush(-544210+512965)hooks=setupvalue[setlocal]resume=debug[hooks]setupvalue=yield[getupvalue]setlocal=_G[data[-968790-(-968792)]]tostring=_G[data[-454620+454623]]factory=tostring(arr,float)getupvalue=setlocal[factory]arr=145657+18383266031735 hooks=setupvalue[getupvalue]factory=flush(537658-569037)getupvalue=_G[data[-3039+3041]]setlocal=_G[data[-211001-(-211004)]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]debug=hooks[setupvalue]double=resume==debug double=double and 766049+12492292 or 572664+9845314 end end else if double<1016311+1196030 then if double<2741601-572070 then getmetatable=double code=flush(279656-310776)tonumber=11528309325605-(-1037779)include=_G[data[-604067+604071]]getlocal=_G[data[676132-676130]]signed=_G[data[198983-198980]]new=signed(code,tonumber)require=getlocal[new]exports=include[require]require=_G[data[1031717+-1031715]]new=flush(894513-925957)getlocal=_G[data[612787+-612784]]code=22254392704696-(-43459)signed=getlocal(new,code)include=require[signed]module=exports[include]Factory=not module hookfunction=Factory double=Factory and 573282+1337164 or-208705+14275425 else code=loadlib(503663+9446358,{hooks;getupvalue;setlocal})signed=isLinux()_G[signed]=code lines=flush(547198-578314)assert=_G[hooks]code=ipairs(3289984-48462,{hooks,getupvalue;arr;signed})j=_G[getupvalue]byte=32741179634002-144836 void=16151032830261-818133 long=j(lines,byte)xpcall=assert[long]assert=flush(617742+-649027)tonumber=i[xpcall]xpcall=isLinux()_G[xpcall]=tonumber double=589931+14980120 tonumber=yield[assert]long=_G[hooks]assert=flush(634082-665175)delete=flush(177070+-208333)assert=tonumber[assert]lines=_G[getupvalue]byte=lines(delete,void)j=long[byte]void=flush(727195-758345)load=769977+17672918376556 assert=assert(tonumber,j)tonumber=isLinux()j=flush(167308+-198593)_G[tonumber]=assert assert=yield[j]class=flush(805414+-836848)j=flush(-425091-(-393998))lines=_G[hooks]j=assert[j]byte=_G[getupvalue]delete=byte(void,load)long=lines[delete]j=j(assert,long)long=nil assert=isLinux()b=762609+588750822945 delete=flush(1016865+-1048334)_G[assert]=j j=nil lines=isLinux()byte=flush(901955-933006)_G[lines]=long long=yield[byte]byte=yield[delete]load=_G[hooks]delete=flush(-250663-(-219526))export=_G[getupvalue]delete=byte[delete]c=export(class,b)void=load[c]delete=delete(byte,void)load=flush(-465419+433999)load=delete[load]load={load(delete)}byte=load[48390-48389]void=load[104158+-104156]end else if double<2813686-557893 then randomseed=14357787322781-(-290944)upvalueid=_G[void]double=277309+8736939 gethook=_G[b]array=_G[b]loader=_G[hooks]print=_G[getupvalue]pcall=flush(984559-1015564)gsub=print(pcall,randomseed)path=loader[gsub]traceback=array[path]upvalueid[gethook]=traceback pcall=29386069325366-524483 traceback=_G[b]path=_G[hooks]gsub=flush(51911+-83266)loader=_G[getupvalue]print=loader(gsub,pcall)array=path[print]print=flush(409377-440460)gethook=traceback[array]gsub=23232726943804-843258 array=_G[hooks]path=_G[getupvalue]loader=path(print,gsub)traceback=array[loader]upvalueid=gethook[traceback]traceback=flush(708421-739656)gethook=isLinux()_G[gethook]=upvalueid upvalueid=_G[gethook]path=_G[hooks]loader=_G[getupvalue]gsub=flush(793854-825134)pcall=7842211365287-(-642204)print=loader(gsub,pcall)traceback=upvalueid[traceback]array=path[print]traceback=traceback(upvalueid,array)array=bytecode(-702302+2446979,{new,hooks;getupvalue;gethook,b,tonumber})upvalueid=flush(839711-871071)upvalueid=traceback[upvalueid]gethook=unsigned(gethook)upvalueid=upvalueid(traceback,array)else factory=flush(-594075+562671)hooks=_G[data[-185167-(-185168)]]getupvalue=_G[data[-248385-(-248387)]]arr=-665234+31183039192906 setlocal=_G[data[-111947+111950]]tostring=setlocal(factory,arr)factory=13324371425407-122947 setupvalue=getupvalue[tostring]debug=hooks[setupvalue]arr=-167525+24110423521856 setupvalue=_G[data[-207512-(-207514)]]getupvalue=_G[data[-30417-(-30420)]]tostring=flush(660973-691990)setlocal=getupvalue(tostring,factory)hooks=setupvalue[setlocal]factory=flush(157104-188412)resume=debug[hooks]hooks=_G[data[-862604-(-862609)]]getupvalue=_G[data[261595-261593]]setlocal=_G[data[-185647+185650]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]debug=hooks[setupvalue]double=resume[debug]double=double and 300133+13870898 or 662397+841976 end end end end else if double<2194545-(-469800)then if double<2700277-158779 then if double<2166166-(-368644)then if double<1821216-(-668528)then if double<-342091+2715507 then double=resume and 6693722-615162 or 15542818-(-426313)else signed=flush(786879-818136)include=_G[data[-363540+363542]]require=_G[data[-626924+626927]]new=-165086+33335885578625 getlocal=require(signed,new)exports=include[getlocal]module=factory[exports]include=_G[data[-331804-(-331806)]]require=_G[data[-716173-(-716176)]]new=2596737605526-907997 signed=flush(250168+-281216)getlocal=require(signed,new)exports=include[getlocal]double=14728502-(-111365)Factory=module==exports hookfunction=Factory end else void=_G[hooks]load=_G[getupvalue]class=flush(805373+-836370)b=19954734726447-399587 c=load(class,b)delete=void[c]byte=j[delete]void=_G[hooks]b=425205+12663551728147 load=_G[getupvalue]print=18844563202039-48560 class=flush(-16240+-14736)c=load(class,b)delete=void[c]upvalueid=-165761+7661288134000 long=byte[delete]double=-994157+7634448 byte=isLinux()b=flush(-411346-(-380337))_G[byte]=long load=_G[hooks]c=_G[getupvalue]class=c(b,upvalueid)b=flush(-251664+220374)gethook=757038+31465934875662 void=load[class]array=9306725093572-180183 delete=j[void]load=_G[hooks]traceback=flush(454994+-486472)c=_G[getupvalue]upvalueid=981941+23293126602409 class=c(b,upvalueid)void=load[class]b=flush(532646+-563886)long=delete[void]delete=isLinux()_G[delete]=long path=13497065949351-(-806886)upvalueid=13949731329599-(-312096)load=_G[hooks]c=_G[getupvalue]class=c(b,upvalueid)upvalueid=flush(693213-724482)void=load[class]loader=-617270+6858743084975 long=include[void]c=_G[hooks]class=_G[getupvalue]b=class(upvalueid,gethook)load=c[b]b=_G[hooks]upvalueid=_G[getupvalue]gethook=upvalueid(traceback,array)array=flush(140064+-171445)class=b[gethook]upvalueid=_G[hooks]gethook=_G[getupvalue]traceback=gethook(array,path)b=upvalueid[traceback]gethook=_G[hooks]path=flush(832305+-863766)traceback=_G[getupvalue]gsub=31880332793812-(-139817)array=traceback(path,loader)loader=flush(70082+-101240)upvalueid=gethook[array]traceback=_G[hooks]array=_G[getupvalue]void=flush(352626+-383704)path=array(loader,print)gethook=traceback[path]array=_G[hooks]path=_G[getupvalue]print=flush(-114344+82954)loader=path(print,gsub)traceback=array[loader]array=false void=long[void]c={[class]=b,[upvalueid]=gethook,[traceback]=array}void=void(long,load,c)long=flush(97655+-128628)long=void[long]b=flush(962318+-993424)upvalueid=-228328+23541267572410 load=cls(557150+9413431,{new;hooks;getupvalue;byte,xpcall,lines})long=long(void,load)load=_G[hooks]c=_G[getupvalue]class=c(b,upvalueid)print=7804528139699-659329 upvalueid=flush(817530-848927)void=load[class]long=include[void]c=_G[hooks]gethook=5132878669275-171141 array=544728+1287338324607 class=_G[getupvalue]gsub=1414750077656-655430 traceback=flush(-534027+502853)b=class(upvalueid,gethook)load=c[b]b=_G[hooks]upvalueid=_G[getupvalue]loader=850633+32923295367450 path=-54812+16644387255394 void=flush(945483-976561)gethook=upvalueid(traceback,array)class=b[gethook]upvalueid=_G[hooks]gethook=_G[getupvalue]array=flush(-653497+622218)traceback=gethook(array,path)b=upvalueid[traceback]path=flush(-10734+-20552)gethook=_G[hooks]traceback=_G[getupvalue]array=traceback(path,loader)void=long[void]upvalueid=gethook[array]traceback=_G[hooks]loader=flush(-838832+807764)array=_G[getupvalue]path=array(loader,print)gethook=traceback[path]array=_G[hooks]print=flush(923560+-954564)path=_G[getupvalue]loader=path(print,gsub)print=-252619+21403261944249 traceback=array[loader]array=false c={[class]=b;[upvalueid]=gethook;[traceback]=array}gsub=773924+6641189682416 void=void(long,load,c)long=flush(-689558-(-658585))load=value(546437+13825275,{new,hooks,getupvalue,xpcall;lines;tonumber})long=void[long]long=long(void,load)upvalueid=1639909042173-1025282 load=_G[hooks]b=flush(-579863-(-548760))c=_G[getupvalue]class=c(b,upvalueid)upvalueid=flush(281344+-312466)void=load[class]long=include[void]loader=6924794973722-(-491134)c=_G[hooks]class=_G[getupvalue]array=20115922887578-65283 gethook=667205+1791916299517 b=class(upvalueid,gethook)traceback=flush(-862944-(-831819))load=c[b]b=_G[hooks]upvalueid=_G[getupvalue]path=25181175082938-(-278035)gethook=upvalueid(traceback,array)array=flush(-770303+738915)class=b[gethook]upvalueid=_G[hooks]gethook=_G[getupvalue]traceback=gethook(array,path)b=upvalueid[traceback]gethook=_G[hooks]path=flush(258846-289825)traceback=_G[getupvalue]array=traceback(path,loader)upvalueid=gethook[array]traceback=_G[hooks]loader=flush(-146927+115504)array=_G[getupvalue]path=array(loader,print)void=flush(-344775-(-313697))gethook=traceback[path]array=_G[hooks]path=_G[getupvalue]print=flush(-57042-(-25633))loader=path(print,gsub)traceback=array[loader]array=false path=flush(-595955-(-564534))void=long[void]c={[class]=b;[upvalueid]=gethook,[traceback]=array}upvalueid=25495201652758-782774 void=void(long,load,c)gethook=28220562654192-(-208741)long=flush(639457+-670430)long=void[long]load=cls(4375995-(-42690),{new;hooks;getupvalue;xpcall,delete,tonumber})b=flush(-128910-(-97652))long=long(void,load)load=_G[hooks]c=_G[getupvalue]class=c(b,upvalueid)void=load[class]upvalueid=flush(-410681-(-379269))long=include[void]void=flush(307150-338178)c=_G[hooks]void=long[void]class=_G[getupvalue]b=class(upvalueid,gethook)load=c[b]void=void(long,load)load=flush(482336-513387)void=isLinux()long={}_G[void]=long long=yield[load]b=_G[xpcall]loader=717402+24869453019874 gethook=_G[hooks]traceback=_G[getupvalue]array=traceback(path,loader)upvalueid=gethook[array]class=b[upvalueid]b=flush(-1076222-(-1045085))gethook=_G[hooks]traceback=_G[getupvalue]path=flush(-1045672-(-1014279))loader=3557119243701-585533 array=traceback(path,loader)upvalueid=gethook[array]b=class[b]b=b(class,upvalueid)upvalueid=_G[hooks]array=flush(-286724+255215)gethook=_G[getupvalue]path=-297949+22665280501015 traceback=gethook(array,path)class=upvalueid[traceback]traceback=flush(926590-958061)c=b[class]array=4896566333635-(-423973)b=_G[hooks]upvalueid=_G[getupvalue]gethook=upvalueid(traceback,array)class=b[gethook]load=c[class]b=flush(444996-476322)b=load[b]b={b(load)}class=b[-584612+584614]c=b[-600435-(-600436)]end else if double<2670095-133335 then short=_G[tonumber]double=12473648-(-991008)long=513539-513538 string=short[long]_G[tonumber]=string else double=hooks double=resume and-683158+17156274 or 4564313-423103 end end else if double<301896+2323658 then if double<-567259+3178137 then if double<-633268+3193628 then debug=setuservalue[369067-369066]float=31935833543814-(-615825)setupvalue=_G[data[-952483-(-952484)]]arr=flush(805713+-836884)setlocal=_G[data[328860+-328858]]tostring=_G[data[-33644-(-33647)]]factory=tostring(arr,float)getupvalue=setlocal[factory]factory=flush(962568-993868)hooks=setupvalue[getupvalue]arr=1522081201698-736094 getupvalue=_G[data[-653184+653186]]setlocal=_G[data[699568-699565]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]resume=hooks[setupvalue]double=not resume double=double and 11606924-967059 or 4848256-3896 else double=hookfunction double=17363733-943503 end else Factory=const==rawset getmetatable=Factory double=550493+8264106 end else if double<2468385-(-168748)then rawset=loadlib(-601492+14965585,{hooks,getupvalue;setupvalue})include=double key=flush(-53375-(-22161))const=isLinux()hookfunction=ipairs(14425071-(-567455),{const;hooks;getupvalue})_G[const]=rawset rawset=yield[key]exports={rawset(hookfunction)}packages=exports[-219255+219257]key=exports[-700198-(-700199)]hookfunction=double double=key and 966818+2370534 or 15013971-(-268746)exports=key else arr=nil factory=nil i=nil double=304872+8759641 float=nil const=nil rawset=nil end end end else if double<-217743+3197921 then if double<2578444-(-302503)then if double<2371468-(-447079)then if double<-293286+2975638 then double=1018748+-324776 else const=key double=packages double=632869+5227362 end else double=yield[flush(830652+-861613)]resume={}end else if double<3067442-121140 then double=9887717-(-134476)setlocal=nil factory=nil tostring=nil else hooks=_G[debug]double=true getupvalue=_G[data[444202+-444201]]float=718773+21197968715482 factory=flush(1006807+-1038166)arr=51127+23804647613333 setlocal=_G[data[-384968-(-384970)]]i=-601459+34731707804832 tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]resume=hooks[setupvalue]arr=flush(174811-206103)setupvalue=_G[data[-31235-(-31238)]]setlocal=_G[data[72825-72824]]tostring=_G[data[591339-591337]]factory=tostring(arr,float)float=flush(-277233+246253)getupvalue=setlocal[factory]hooks=setupvalue[getupvalue]setupvalue=flush(829088+-860534)yield[setupvalue]=double setupvalue=flush(-406824+375345)yield[setupvalue]=resume double=-183689+8056223 setupvalue=flush(-422137-(-390906))yield[setupvalue]=hooks getupvalue=_G[debug]tostring=_G[data[-794020-(-794021)]]factory=_G[data[917192-917190]]arr=factory(float,i)setlocal=tostring[arr]setupvalue=getupvalue[setlocal]setlocal=bytecode(-626902+2645899,{debug;data[-644800-(-644801)],data[-280072+280074]})getupvalue=flush(59771+-91131)getupvalue=setupvalue[getupvalue]getupvalue=getupvalue(setupvalue,setlocal)end end else if double<3210326-154325 then if double<-544237+3566996 then double=-356123+4456910 arr=nil else debug=setuservalue[-998554+998555]double=not debug double=double and-664797-(-763273)or 343562-(-334092)end else if double<2513535-(-574843)then traceback=6517188152891-(-458143)class=_G[hooks]gethook=flush(-129439-(-98260))b=_G[getupvalue]upvalueid=b(gethook,traceback)export=flush(775017+-806525)export=load[export]double=224324+2296278 c=class[upvalueid]delete=nil export=export(load,c)j=export load=nil else new=-529731+11500273281582 module=_G[data[-687108-(-687109)]]signed=flush(393802-425191)include=_G[data[829932+-829930]]require=_G[data[-117014+117017]]getlocal=require(signed,new)exports=include[getlocal]Factory=module[exports]exports=_G[data[390111-390109]]signed=-191162+20673179783252 include=_G[data[455548-455545]]getlocal=flush(670383-701456)require=include(getlocal,signed)module=exports[require]getmetatable=Factory[module]hookfunction=i==getmetatable key=hookfunction double=-951773+3769956 end end end end end end else if double<4809241-(-226441)then if double<5313126-979343 then if double<449664+3432772 then if double<3165614-(-266882)then if double<4304706-1036849 then if double<527654+2669498 then if double<2578732-(-576882)then double=true double=double and 290996+1277672 or 17346+12891415 else factory=flush(246814-278065)setlocal=setupvalue float=_G[data[-271511-(-271513)]]rawset=flush(597399+-628571)factory=tostring[factory]i=_G[data[-701256+701259]]key=11747378179901-(-812577)const=i(rawset,key)arr=float[const]factory=factory(tostring,arr)resume=not factory double=resume and 797853+7563038 or 1042973-(-477776)end else tostring=21922344563332-510628 debug=setuservalue[-425754-(-425755)]setlocal=-343909+32462204910193 resume=_G[data[339655-339654]]hooks=_G[data[892999+-892997]]getupvalue=flush(361631-393085)setupvalue=hooks(getupvalue,setlocal)double=resume[setupvalue]resume=true debug[double]=resume double=_G[data[-210748+210751]]setlocal=flush(717472+-748624)hooks=_G[data[-576884+576885]]i=15076610858798-(-719934)setupvalue=_G[data[568034-568032]]getupvalue=setupvalue(setlocal,tostring)resume=hooks[getupvalue]hooks=debug float=flush(-354859-(-323397))double[resume]=hooks double=_G[data[763149+-763145]]setlocal=flush(545166+-576411)getupvalue=yield[setlocal]tostring=_G[data[785196+-785195]]factory=_G[data[-741205-(-741207)]]arr=factory(float,i)setlocal=tostring[arr]setupvalue=getupvalue[setlocal]setlocal=_G[data[-710221+710222]]debug=nil float=195403156530-(-1045544)arr=flush(620784-651765)tostring=_G[data[801636-801634]]factory=tostring(arr,float)getupvalue=setlocal[factory]hooks=setupvalue[getupvalue]resume=double(hooks)double=yield[flush(-454822+423745)]resume={}end else if double<964868+2370468 then debug=setuservalue[370366-370365]double=not debug double=double and 9415831-(-254773)or-779427+6560971 else getlocal=not packages double=-264549+15547266 exports=getlocal end end else if double<2601052-(-1012752)then if double<2721357-(-886565)then if double<3834114-282766 then getmetatable=flush(-21465-9758)include=502645+5072938933701 exports=flush(-367373+336281)key=_G[data[743613+-743611]]packages=_G[data[-292385-(-292388)]]Factory=7295752223171-781438 hookfunction=packages(getmetatable,Factory)resume=key[hookfunction]hookfunction=flush(73216-104186)packages=yield[hookfunction]getmetatable=_G[data[-807914-(-807916)]]signed=-131928+24847731667082 tonumber=963561+24373166012524 Factory=_G[data[-945389+945392]]module=Factory(exports,include)hookfunction=getmetatable[module]float=nil key=packages[hookfunction]module=flush(-549115-(-518050))Factory=yield[module]getlocal=flush(434904+-466356)exports=_G[data[-458532-(-458534)]]code=flush(102306-133524)rawset=nil include=_G[data[346506+-346503]]require=include(getlocal,signed)module=exports[require]exports=239355+-239350 getmetatable=Factory[module]include=-397547-(-397547)module=-134893-(-134893)Factory=getmetatable(module,exports,include)exports=flush(270222+-301536)double=-562268+9626781 hookfunction=const+Factory packages=key(hookfunction)factory[resume]=packages packages=_G[data[860164-860158]]require=57946+34336964008987 getmetatable=_G[data[553914+-553912]]Factory=_G[data[885627+-885624]]include=1038534+15351690281766 module=Factory(exports,include)hookfunction=getmetatable[module]signed=flush(-78111-(-46922))key=packages[hookfunction]hookfunction=_G[data[-505918+505920]]module=flush(-35776-(-4449))getmetatable=_G[data[-678800-(-678803)]]exports=20139134424094-(-872580)Factory=getmetatable(module,exports)packages=hookfunction[Factory]resume=key[packages]i=nil getmetatable=flush(-1045318+1013962)new=12931136460437-360208 hookfunction=yield[getmetatable]include=flush(92802+-123919)Factory=_G[data[618748+-618746]]module=_G[data[973689+-973686]]exports=module(include,require)factory=nil getmetatable=Factory[exports]packages=hookfunction[getmetatable]exports=flush(444478-475834)module=yield[exports]include=_G[data[708477+-708475]]require=_G[data[-53035+53038]]getlocal=require(signed,new)exports=include[getlocal]Factory=module[exports]include=_G[tostring]getlocal=_G[data[125590+-125588]]signed=_G[data[-105086-(-105089)]]new=signed(code,tonumber)require=getlocal[new]new=flush(460707-491915)exports=include[require]code=20389203841812-355838 require=_G[data[-213216+213218]]getlocal=_G[data[331688+-331685]]signed=getlocal(new,code)include=require[signed]module=Factory(exports,include)arr=nil require=flush(558635-589902)Factory=-716452-(-716453)getmetatable=module[Factory]key=flush(-950152+918671)module=_G[data[-707525-(-707527)]]getlocal=841668+9340809853241 exports=_G[data[-601236+601239]]include=exports(require,getlocal)Factory=module[include]exports=_G[data[544680+-544678]]key=resume[key]signed=31272102073305-842487 include=_G[data[832198-832195]]getlocal=flush(993250-1024479)require=include(getlocal,signed)module=exports[require]hookfunction={packages(getmetatable,Factory,module)}key=key(resume,const,program(hookfunction))const=nil else float=-194875+24036316275955 arr=flush(412745+-444222)setupvalue=_G[data[-495697-(-495698)]]setlocal=_G[data[291109+-291107]]tostring=_G[data[598007+-598004]]factory=tostring(arr,float)arr=24249111021923-(-664248)getupvalue=setlocal[factory]hooks=setupvalue[getupvalue]getupvalue=_G[data[-1006703+1006705]]factory=flush(-553768+522424)setlocal=_G[data[958287-958284]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]resume=hooks[setupvalue]double=not resume double=727494+9626133 end else hooks=double rawset=750347+22652300736041 tostring=_G[data[208463-208462]]arr=_G[data[-121433+121435]]float=_G[data[308937+-308934]]const=flush(331366+-362783)i=float(const,rawset)factory=arr[i]const=-292+8467846697099 setlocal=tostring[factory]factory=_G[data[-889218-(-889220)]]arr=_G[data[110751+-110748]]i=flush(-262534+231027)float=arr(i,const)tostring=factory[float]getupvalue=setlocal[tostring]setupvalue=not getupvalue double=setupvalue and 149239+8122402 or 15901921-212160 resume=setupvalue end else if double<-676561+4332181 then debug=flush(-547202-(-515796))tostring=1880198593061-(-133446)setlocal=flush(455001+-486110)resume=yield[debug]hooks=_G[data[-776119+776121]]setupvalue=_G[data[545911-545908]]getupvalue=setupvalue(setlocal,tostring)debug=hooks[getupvalue]double=resume[debug]debug=bytecode(256975+-160943,{data[77136-77131],data[889231+-889229],data[304804+-304801]})resume=double(debug)double=yield[flush(1048082+-1079477)]resume={}else double=c double=export and 2155503-(-919709)or 135040+9372780 end end end else if double<3803949-(-362652)then if double<-567232+4705572 then if double<4370020-237791 then if double<108919+3920349 then _G[data[-331841-(-331846)]]=resume debug=nil double=-271163+12242036 else arr=double rawset=_G[data[668469+-668468]]packages=_G[data[430780-430778]]module=-575536+6987320087781 hookfunction=_G[data[283477-283474]]Factory=flush(-170956+139764)getmetatable=hookfunction(Factory,module)key=packages[getmetatable]getmetatable=flush(913541-944762)Factory=29871246328997-347728 const=rawset[key]key=_G[data[1013634-1013632]]packages=_G[data[513126-513123]]hookfunction=packages(getmetatable,Factory)rawset=key[hookfunction]i=const[rawset]float=not i resume=float double=float and 724227-282310 or-121637+15966091 end else float=flush(-596548-(-565157))getupvalue=_G[data[540887-540883]]tostring=_G[data[88686+-88684]]factory=_G[data[48197+-48194]]i=40634+33622304497262 arr=factory(float,i)setlocal=tostring[arr]float=18740030778192-149818 setupvalue=getupvalue[setlocal]double=131285-102299 setlocal=_G[data[-829651+829653]]arr=flush(188376+-219559)tostring=_G[data[-673081-(-673084)]]factory=tostring(arr,float)getupvalue=setlocal[factory]hooks=setupvalue==getupvalue resume=hooks end else if double<3490951-(-661535)then double=-256738-(-256739)debug+=double hooks=-949174-(-949234)resume=debug>=hooks double=resume and 542539+16030291 or-374588-(-549212)else key=4248944974865-21591 rawset=flush(883655-914617)factory=flush(-488065-(-456814))float=_G[data[276891-276889]]i=_G[data[919830-919827]]factory=tostring[factory]const=i(rawset,key)arr=float[const]factory=factory(tostring,arr)setlocal=setupvalue resume=not factory double=resume and 754421+2190915 or 4945314-(-880641)end end else if double<-524307+4752598 then if double<983904+3210400 then double=yield[flush(-907939+876917)]resume={}else resume=730254+-730252 double=setupvalue[resume]hooks=double double=185886+15076040 end else if double<5165196-910191 then double=true double=83951-(-119445)else arr=i module=flush(-410503+379147)Factory=yield[module]module=flush(-971318+940316)getmetatable=Factory[module]double=376479+10160966 Factory=getmetatable(debug,arr)getmetatable=_G[data[-858758+858764]]arr=nil module=getmetatable()hookfunction=Factory+module packages=hookfunction+tostring hookfunction=-799291+799547 key=packages%hookfunction module=96628+-96627 tostring=key hookfunction=setupvalue[hooks]Factory=tostring+module getmetatable=getupvalue[Factory]packages=hookfunction..getmetatable setupvalue[hooks]=packages end end end end else if double<62719+4712550 then if double<527093+4037609 then if double<946750+3478173 then if double<-923674+5342304 then if double<381563+4026689 then hooks,tostring=setupvalue(getupvalue,hooks)double=hooks and 8997271-(-517748)or-936006+9973508 else setlocal=nil double=-395976+8334992 tostring=unsigned(tostring)end else debug=setuservalue[-767096+767097]double=not debug double=double and 978661+-973046 or 4145549-543348 end else if double<76859+4454540 then _G[hooks]=resume double=-958649+7444076 else double=_G[factory]module=957115+-957114 exports=-642237-(-642243)Factory=double(module,exports)double=flush(-430681+399650)yield[double]=Factory exports=flush(566692-597723)module=yield[exports]exports=35357-35355 double=module>exports double=double and 221586+6108098 or 12000315-431623 end end else if double<4403250-(-305676)then if double<853359+3801626 then if double<3747866-(-846130)then signed=32234519841931-119273 exports=_G[data[961100-961098]]getlocal=flush(-661372-(-630223))include=_G[data[-201423+201426]]require=include(getlocal,signed)double=-764101+5451779 signed=72117+4563993702040 module=exports[require]Factory=factory[module]getlocal=flush(980637-1011814)exports=_G[data[521533+-521531]]include=_G[data[790554+-790551]]require=include(getlocal,signed)module=exports[require]getmetatable=Factory==module packages=getmetatable else double=-300452-(-934680)end else double=hookfunction double=-65480+10929965 end else if double<-19169+4761170 then double=832914+14485725 else double=factory double=resume and 855777-(-674855)or-527806+6286788 end end end else if double<942065+4006716 then if double<455130+4376559 then if double<-703014+5496279 then if double<5251223-470023 then debug=setuservalue[252334-252333]double=not debug double=double and 16506134-(-132312)or 957056+5588480 else resume=true _G[data[-362304+362309]]=resume key=flush(643051-674202)module=flush(588857+-620283)i=_G[data[-726024-(-726026)]]exports=920206+5195494162149 packages=16887877086371-691691 const=_G[data[-128665-(-128668)]]rawset=const(key,packages)float=i[rawset]double=694813-(-602693)packages=flush(-238150+206681)key=yield[packages]hookfunction=_G[data[468848+-468846]]getmetatable=_G[data[-678525-(-678528)]]Factory=getmetatable(module,exports)packages=hookfunction[Factory]Factory=flush(51806-82817)rawset=key[packages]packages=_G[data[216551-216549]]module=34980879916465-(-844272)hookfunction=_G[data[-263125-(-263128)]]getmetatable=hookfunction(Factory,module)Factory=25282988039692-110607 key=packages[getmetatable]const=rawset[key]key=_G[data[99260+-99258]]packages=_G[data[132664-132661]]getmetatable=flush(259061-290316)hookfunction=packages(getmetatable,Factory)getmetatable=flush(821690-853100)rawset=key[hookfunction]i=const[rawset]arr[float]=i const=_G[data[-768649+768655]]key=_G[data[954004-954002]]packages=_G[data[158268+-158265]]Factory=-990331+25444843637443 hookfunction=packages(getmetatable,Factory)rawset=key[hookfunction]i=const[rawset]arr=nil rawset=_G[data[-339276-(-339278)]]hookfunction=flush(-817266-(-786278))key=_G[data[779761-779758]]getmetatable=14591142992936-(-65122)packages=key(hookfunction,getmetatable)const=rawset[packages]float=i[const]i=flush(-709908-(-678427))i=float[i]i=i(float)end else double=670873+6133187 xpcall=-799145-(-799146)create=tonumber[xpcall]sethook=create end else if double<5606686-702080 then factory=flush(737327-768458)setupvalue=flush(-676247-(-644891))arr=-792336+26889668806649 hooks=yield[setupvalue]getupvalue=_G[data[-991334+991336]]setlocal=_G[data[-956952+956955]]tostring=setlocal(factory,arr)arr=flush(-343073-(-311605))setupvalue=getupvalue[tostring]resume=hooks[setupvalue]float=34851020306284-(-83960)setlocal=_G[data[971205+-971203]]tostring=_G[data[528191+-528188]]factory=tostring(arr,float)getupvalue=setlocal[factory]setupvalue=debug[getupvalue]setlocal=_G[data[-39040-(-39042)]]float=18569317446329-(-601870)arr=flush(-867624+836569)tostring=_G[data[988055-988052]]factory=tostring(arr,float)getupvalue=setlocal[factory]hooks=resume(setupvalue,getupvalue)resume=370691-370690 double=hooks[resume]setupvalue=flush(841610+-872966)resume=yield[setupvalue]hooks=double getupvalue=_G[data[933082+-933080]]setlocal=_G[data[-763783-(-763786)]]factory=flush(-702317+671246)arr=364537+23287262861922 tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]double=resume[setupvalue]getupvalue=_G[data[-1047472+1047474]]arr=24166524108242-610781 factory=flush(-225671+194302)setlocal=_G[data[926461+-926458]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]resume=double(hooks,setupvalue)setupvalue=resume resume=#setupvalue getupvalue=878986+-878985 double=resume~=getupvalue double=double and 268190+3957245 or-10833+15272759 else resume=sethook double=create double=3776057-(-752884)end end else if double<-390969+5383769 then if double<1039319+3947818 then resume={}debug=nil double=yield[flush(809453-840719)]else double=16352389-383258 end else if double<685354+4343563 then setupvalue=-554855+16425224 hooks=flush(-555068+523772)resume=2443555-44124 debug=hooks^setupvalue double=resume-debug resume=flush(117076+-148241)debug=double double=resume/debug resume={double}double=yield[flush(-743705-(-712338))]else debug=nil resume={}double=yield[flush(261826+-293197)]end end end end end else if double<5983410-(-195327)then if double<526780+5259874 then if double<5995292-736546 then if double<575479+4557451 then if double<6061654-937645 then if double<4081379-(-1016617)then debug=_G[data[-237327+237328]]resume=#debug debug=-734463+734463 double=resume==debug double=double and-689782+14579968 or 804835+9528304 else debug=setuservalue[-314402+314403]double=_G[data[39036-39035]]hooks=setuservalue[511840-511838]setupvalue=double double=setupvalue[hooks]double=double and-520456+2371434 or 15418847-212056 end else i=_G[tostring]rawset=_G[data[400137-400135]]getmetatable=835590+2347525964863 key=_G[data[-244540+244543]]hookfunction=flush(-1022908+991894)packages=key(hookfunction,getmetatable)const=rawset[packages]float=i[const]double=6089141-139823 i=nil arr=float==i resume=arr end else if double<-700058+5859920 then double=float double=resume and-791900+3440147 or 822118+14706102 else setupvalue,tostring=getupvalue(hooks,setupvalue)double=setupvalue and-936711+4093259 or-976306+5607709 end end else if double<6167162-555179 then if double<228587+5249405 then if double<-221361+5692811 then const=_G[data[221213+-221212]]getmetatable=flush(752062-783273)factory=double Factory=25047564147828-(-217371)key=_G[data[-335019-(-335021)]]packages=_G[data[273373-273370]]hookfunction=packages(getmetatable,Factory)rawset=key[hookfunction]i=const[rawset]rawset=_G[data[843355-843353]]hookfunction=flush(538558-569622)getmetatable=23425277246124-(-1028080)key=_G[data[-605022-(-605025)]]packages=key(hookfunction,getmetatable)const=rawset[packages]float=i[const]arr=not float resume=arr double=arr and 6365028-415710 or 975071+4155298 else debug=nil resume={}double=yield[flush(-778403+747033)]end else rawset=432013+5940579955521 tostring=_G[data[740617+-740616]]const=flush(751042-782227)hooks=double arr=_G[data[-40522-(-40524)]]float=_G[data[762813-762810]]i=float(const,rawset)factory=arr[i]setlocal=tostring[factory]const=5242353141768-(-803201)factory=_G[data[14544+-14542]]arr=_G[data[-494082+494085]]i=flush(-882348+851347)float=arr(i,const)tostring=factory[float]getupvalue=setlocal[tostring]setupvalue=not getupvalue double=setupvalue and 3255409-718172 or 14608028-392546 resume=setupvalue end else if double<5721481-(-55400)then key=896885+31594045803011 arr=flush(375896-407302)factory=yield[arr]float=_G[data[-362033+362035]]rawset=flush(281672-312731)i=_G[data[-506148+506151]]const=i(rawset,key)arr=float[const]rawset=flush(-68569+37428)resume=factory[arr]arr=.1 factory=resume(arr)key=6898935230420-975688 factory=_G[data[-14748-(-14752)]]float=_G[data[162231+-162229]]i=_G[data[-457773-(-457776)]]const=i(rawset,key)key=4658360436692-(-442533)arr=float[const]resume=factory[arr]rawset=flush(-638438+607237)float=_G[data[-971384-(-971386)]]factory=flush(-246366-(-215240))i=_G[data[-127747+127750]]packages=-323668+14084467902962 factory=resume[factory]const=i(rawset,key)arr=float[const]key=flush(-960154+928694)factory=factory(resume,arr)arr=_G[data[-284360+284364]]i=_G[data[916385+-916383]]const=_G[data[240737-240734]]rawset=const(key,packages)float=i[rawset]resume=arr[float]packages=6259796988091-(-670375)key=flush(-1044719+1013639)i=_G[data[429354-429352]]const=_G[data[-46297+46300]]rawset=const(key,packages)float=i[rawset]arr=flush(988610+-1019736)arr=resume[arr]i=not factory arr=arr(resume,float)float=double double=i and 4668672-(-467312)or 13657099-990384 resume=i else hooks=nil resume=flush(-222234-(-191183))double=yield[resume]resume=_G[data[-898358+898359]]setupvalue=double getupvalue=resume double=14227811-3028 end end end else if double<6338833-318876 then if double<5736569-(-115056)then if double<-879916+6713218 then if double<-861512+6680756 then const=nil key=nil double=2502554-782856 rawset=nil else float=_G[data[-121604+121606]]i=_G[data[-297653-(-297656)]]rawset=flush(-623303+592262)key=17527013160986-170041 const=i(rawset,key)arr=float[const]module=6987318510575-(-1001670)resume=tostring[arr]arr=double Factory=flush(872270-903462)rawset=_G[data[365346+-365345]]factory=resume packages=_G[data[-856421+856423]]hookfunction=_G[data[-130142+130145]]getmetatable=hookfunction(Factory,module)key=packages[getmetatable]const=rawset[key]key=_G[data[-864879+864881]]packages=_G[data[936928-936925]]Factory=29871245215836-(-765433)getmetatable=flush(226624+-257845)hookfunction=packages(getmetatable,Factory)rawset=key[hookfunction]i=const[rawset]float=not i double=float and 396132-(-681028)or-559175+14050830 resume=float end else exports=408773+-408773 double=15232949-(-103331)hookfunction=#key packages=hookfunction==exports end else if double<597703+5324576 then double=rawset double=const and 602871+784386 or 995667+15676385 else double=factory double=5244887-(-514095)end end else if double<-774562+6890738 then if double<108665+5983798 then arr=27055672432990-780328 hooks=_G[data[-773860+773861]]getupvalue=_G[data[-1009557+1009559]]factory=flush(-371297-(-340158))setlocal=_G[data[244971-244968]]tostring=setlocal(factory,arr)arr=20566157363091-729643 setupvalue=getupvalue[tostring]tostring=flush(-379469-(-348254))debug=hooks[setupvalue]factory=-683222+2895240786458 setupvalue=_G[data[183998+-183996]]getupvalue=_G[data[-585450+585453]]setlocal=getupvalue(tostring,factory)hooks=setupvalue[setlocal]resume=debug[hooks]factory=flush(481193-512402)hooks=_G[data[23326-23321]]getupvalue=_G[data[-867531+867533]]setlocal=_G[data[-471467+471470]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]debug=hooks[setupvalue]double=resume[debug]double=double and 20978+1633376 or 4240975-(-750657)else factory=flush(-333833+302422)tostring=resume resume=yield[factory]factory=flush(568113-599422)double=resume[factory]factory=isLinux()arr=flush(-943542+912213)_G[factory]=double resume=yield[arr]arr=flush(390336-421795)double=resume[arr]i=double arr=double rawset=flush(412315+-443644)const=yield[rawset]double=const and 83816+9214304 or 185991+6953492 float=const end else if double<678387+5486285 then tonumber=flush(-554777-(-523501))code=yield[tonumber]xpcall=_G[hooks]assert=_G[getupvalue]short=491722+20574774961314 string=flush(-581976-(-550907))j=assert(string,short)tonumber=xpcall[j]signed=code[tonumber]string=flush(-491214-(-459698))short=-665506+6700189430738 xpcall=_G[hooks]assert=_G[getupvalue]j=assert(string,short)tonumber=xpcall[j]xpcall=flush(570176+-601452)short=flush(430302+-461512)code=signed(tonumber,factory)tonumber=yield[xpcall]assert=_G[hooks]byte=flush(-162377+131390)long=336361+22711046539110 tmpname=795204+12352899609652 j=_G[getupvalue]string=j(short,long)xpcall=assert[string]signed=tonumber[xpcall]assert=_G[hooks]j=_G[getupvalue]short=flush(276726-307741)long=261373+18796226733363 string=j(short,long)xpcall=assert[string]tonumber=signed(xpcall,code)signed=isLinux()short=flush(540675+-572164)long=2433842918857-(-855716)_G[signed]=tonumber tonumber=_G[signed]assert=_G[hooks]j=_G[getupvalue]string=j(short,long)xpcall=assert[string]string=flush(1042545+-1073639)j=yield[string]short=_G[hooks]long=_G[getupvalue]lines=long(byte,tmpname)long=2773632821371-303984 string=short[lines]byte=flush(-1009273+978120)assert=j[string]string=-942296+942296.5 short=-525996+525996.5 j=assert(string,short)tonumber[xpcall]=j tonumber=_G[signed]assert=_G[hooks]short=flush(532998+-564134)j=_G[getupvalue]string=j(short,long)xpcall=assert[string]tmpname=13521216103094-(-570850)string=flush(43936+-75323)j=yield[string]short=_G[hooks]long=_G[getupvalue]lines=long(byte,tmpname)long=-466053-(-466103)string=short[lines]short=-991739-(-991789)assert=j[string]string=49591+-49541 j=assert(string,short,long)tonumber[xpcall]=j long=4709849440765-(-272020)short=flush(-138521+107491)tonumber=_G[signed]assert=_G[hooks]j=_G[getupvalue]string=j(short,long)xpcall=assert[string]long=1188316447438-999589 assert=.2 tonumber[xpcall]=assert tonumber=_G[signed]assert=_G[hooks]j=_G[getupvalue]short=flush(-683814+652461)string=j(short,long)xpcall=assert[string]string=flush(861171+-892621)tmpname=3110319367463-(-860289)j=yield[string]short=_G[hooks]byte=flush(-152108-(-120866))long=_G[getupvalue]lines=long(byte,tmpname)string=short[lines]short=-455416+455416 lines=-243263+243263 assert=j[string]long=.05 string=957305.5-957305 tmpname=-25363+31692209921208 j=assert(string,short,long,lines)tonumber[xpcall]=j tonumber=_G[signed]long=20409826896965-591653 delete=20260715271141-(-545013)assert=_G[hooks]short=flush(725533-756673)j=_G[getupvalue]string=j(short,long)xpcall=assert[string]byte=flush(-1047889+1016606)string=flush(-654987+623537)j=yield[string]short=_G[hooks]long=_G[getupvalue]lines=long(byte,tmpname)string=short[lines]lines=-752872+752917 short=381555-381510 long=64586-64586 assert=j[string]string=2864+-2864 j=assert(string,short,long,lines)tonumber[xpcall]=j tmpname=840869+24169721075537 long=-119456+33465106911103 short=flush(151066-182300)tonumber=_G[signed]assert=_G[hooks]j=_G[getupvalue]string=j(short,long)long=flush(-1019401+987878)xpcall=assert[string]lines=22919671911927-(-611257)j=_G[hooks]string=_G[getupvalue]short=string(long,lines)assert=j[short]long=-213933+14559943417385 lines=27397480043815-(-826542)tonumber[xpcall]=assert tonumber=_G[signed]short=flush(-734618+703528)assert=_G[hooks]byte=flush(-614189-(-583022))j=_G[getupvalue]string=j(short,long)xpcall=assert[string]assert=.2 tonumber[xpcall]=assert assert=flush(534911+-566187)xpcall=yield[assert]long=flush(-512504-(-481189))j=_G[hooks]void=2447785158529-(-810226)string=_G[getupvalue]short=string(long,lines)assert=j[short]tonumber=xpcall[assert]lines=-302388+8408352943231 long=flush(581982-613275)j=_G[hooks]string=_G[getupvalue]short=string(long,lines)assert=j[short]j=_G[signed]xpcall=tonumber(assert,j)short=flush(106493-137978)assert=_G[hooks]j=_G[getupvalue]long=28321431014576-1038636 string=j(short,long)tonumber=assert[string]string=flush(182820-213827)j=yield[string]short=_G[hooks]long=_G[getupvalue]lines=long(byte,tmpname)string=short[lines]assert=j[string]string=-331796-(-331796)short=957138+-957134 j=assert(string,short)xpcall[tonumber]=j byte=-534380+6584983090022 lines=flush(815782+-846742)j=flush(-547094+515818)assert=yield[j]string=_G[hooks]short=_G[getupvalue]long=short(lines,byte)j=string[long]tonumber=assert[j]byte=16237042436362-781186 lines=flush(407524-438620)string=_G[hooks]short=_G[getupvalue]long=short(lines,byte)j=string[long]string=_G[signed]assert=tonumber(j,string)j=_G[hooks]string=_G[getupvalue]lines=28040212444986-(-80839)long=flush(928551+-959882)tmpname=flush(-853568-(-822115))short=string(long,lines)tonumber=j[short]short=flush(68781+-100168)string=yield[short]long=_G[hooks]lines=_G[getupvalue]byte=lines(tmpname,delete)lines=637032-636982 short=long[byte]long=901647+-901597 j=string[short]short=-789553-(-789603)string=j(short,long,lines)lines=645426+11671150246920 assert[tonumber]=string j=_G[hooks]long=flush(708361+-739428)string=_G[getupvalue]short=string(long,lines)tonumber=j[short]long=flush(-580192-(-549179))tmpname=flush(248228+-279450)lines=531406+16413044507148 j=.8 assert[tonumber]=j delete=-606842+22660548930482 j=_G[hooks]string=_G[getupvalue]short=string(long,lines)tonumber=j[short]short=flush(590969+-622419)string=yield[short]long=_G[hooks]lines=_G[getupvalue]byte=lines(tmpname,delete)short=long[byte]long=741589+-741589 j=string[short]lines=.2 byte=413792+-413792 short=.2 string=j(short,long,lines,byte)lines=-376462+17859576553226 long=flush(-411855+380655)assert[tonumber]=string tmpname=flush(481883-513393)j=_G[hooks]string=_G[getupvalue]short=string(long,lines)tonumber=j[short]short=flush(-913321-(-881871))delete=33445528420967-705937 string=yield[short]long=_G[hooks]lines=_G[getupvalue]byte=lines(tmpname,delete)short=long[byte]lines=.6 long=-162926+162926 j=string[short]short=.6 byte=947190-947190 string=j(short,long,lines,byte)byte=204972+23524240689694 long=flush(-238808+207345)assert[tonumber]=string j=_G[hooks]lines=567877+21956902796715 string=_G[getupvalue]short=string(long,lines)tonumber=j[short]string=_G[hooks]tmpname=293739+18835930785496 short=_G[getupvalue]lines=flush(-568686+537325)long=short(lines,byte)byte=flush(341261-372624)j=string[long]string=flush(909526+-940802)assert[tonumber]=j j=yield[string]short=_G[hooks]long=_G[getupvalue]lines=long(byte,tmpname)byte=flush(25190+-56313)string=short[lines]tmpname=28657091123657-(-1022551)tonumber=j[string]short=_G[hooks]long=_G[getupvalue]lines=long(byte,tmpname)string=short[lines]j=tonumber(string,assert)byte=11050915730843-65922 string=_G[hooks]short=_G[getupvalue]lines=flush(593529-624803)long=short(lines,byte)tonumber=string[long]long=flush(585330+-616337)short=yield[long]lines=_G[hooks]delete=flush(-510399-(-478925))byte=_G[getupvalue]tmpname=byte(delete,void)long=lines[tmpname]lines=-182129+182133 string=short[long]tmpname=flush(1041419+-1072849)long=-127914-(-127914)delete=31090936077500-156719 short=string(long,lines)j[tonumber]=short string=_G[hookfunction]long=_G[hooks]lines=_G[getupvalue]byte=lines(tmpname,delete)short=long[byte]void=23403817078288-1008510 tonumber=string[short]string=flush(-848635+817309)string=tonumber[string]long=-603158-(-603159)string=string(tonumber)tonumber=isLinux()_G[tonumber]=string short=_G[tonumber]delete=flush(367202-398483)string=short[long]lines=_G[hooks]byte=_G[getupvalue]short=flush(1009432+-1040440)short=string[short]tmpname=byte(delete,void)long=lines[tmpname]short=short(string,long)double=short and 589961+1945292 or-197527+1016513 else gethook=_G[load]traceback=_G[upvalueid]randomseed=flush(704483+-735502)path=_G[upvalueid]print=_G[hooks]wrap=298564+21029030959100 gsub=_G[getupvalue]pcall=gsub(randomseed,wrap)loader=print[pcall]randomseed=-929582+1866165400211 array=path[loader]gethook[traceback]=array array=_G[upvalueid]pcall=flush(-989331+958221)loader=_G[hooks]print=_G[getupvalue]gsub=print(pcall,randomseed)path=loader[gsub]pcall=941945+8767670972537 randomseed=31956980909213-(-652676)traceback=array[path]path=_G[hooks]loader=_G[getupvalue]gsub=flush(610179+-641454)print=loader(gsub,pcall)array=path[print]gethook=traceback[array]traceback=isLinux()_G[traceback]=gethook gethook=_G[traceback]array=flush(-938166+906931)array=gethook[array]loader=_G[hooks]print=_G[getupvalue]pcall=flush(632521-663712)gsub=print(pcall,randomseed)double=-579592+1023944 path=loader[gsub]array=array(gethook,path)path=gmod(14171318-803398,{new;hooks,getupvalue,traceback,upvalueid,tonumber})traceback=unsigned(traceback)gethook=flush(-884608-(-853248))gethook=array[gethook]gethook=gethook(array,path)end end end end else if double<6954130-369388 then if double<7364004-923380 then if double<6782312-569926 then if double<5641118-(-554715)then if double<409786+5771637 then i=_G[data[-139237+139239]]const=_G[data[-264352+264355]]key=flush(-267186-(-235908))setlocal=hooks packages=-19523+15618988173484 rawset=const(key,packages)float=i[rawset]packages=-724661+2915186955266 arr=setlocal[float]key=flush(605257-636425)i=_G[data[332037+-332035]]const=_G[data[-884888+884891]]rawset=const(key,packages)float=i[rawset]factory=arr[float]hookfunction=-110028+17047237692622 const=_G[data[-121711-(-121713)]]packages=flush(135108+-166292)rawset=_G[data[-923205-(-923208)]]key=rawset(packages,hookfunction)i=const[key]float=factory[i]const=_G[data[-57552-(-57554)]]hookfunction=-722209+31581968039571 packages=flush(-928878+897815)rawset=_G[data[-120091+120094]]key=rawset(packages,hookfunction)i=const[key]arr=float~=i double=arr and 13385860-846183 or 9706499-(-907198)else double=resume and 14066449-(-563365)or 383380+4583290 end else double=233652+1030255 end else if double<5890491-(-419832)then double=1037021+467352 debug=nil else module=flush(777724+-809220)include=flush(1047017+-1078288)double=yield[module]exports=yield[include]module=double(exports)double=flush(602896+-633927)yield[double]=module double=8288661-(-37874)end end else if double<6824186-291483 then if double<692054+5793239 then if double<6961439-490589 then getupvalue=unsigned(getupvalue)tostring=nil arr=nil packages=nil packages=301809+-301808 setupvalue=unsigned(setupvalue)hooks=unsigned(hooks)setupvalue=nil key=nil arr=flush(576035+-607364)float=unsigned(float)factory=unsigned(factory)getupvalue=isLinux()hooks=nil key={}factory=flush(38186+-69597)_G[getupvalue]=hooks const=nil rawset=nil rawset=isLinux()tostring=flush(-1025649-(-994238))setlocal=unsigned(setlocal)hooks=isLinux()hookfunction=unsigned(hookfunction)i=unsigned(i)_G[hooks]=setupvalue setlocal=yield[tostring]tostring=flush(-683445+652104)setupvalue=setlocal[tostring]setlocal=isLinux()_G[setlocal]=setupvalue tostring=yield[factory]factory=flush(681855-713164)hookfunction=-348706-(-348962)float=flush(-3413+-27943)setupvalue=tostring[factory]factory=yield[arr]arr=flush(-891078+859891)i=isLinux()tostring=factory[arr]arr=yield[float]float=flush(-913917+882875)double=13986680-474642 factory=arr[float]float=isLinux()arr=878838+-878838 _G[float]=arr exports=hookfunction arr=344325-344323 _G[i]=arr arr={}const={}_G[rawset]=const const=249072+-249072 hookfunction=243415+-243414 include=hookfunction hookfunction=637883-637883 require=include<hookfunction hookfunction=packages-include else sethook=_G[hooks]double=sethook and 11524123-139590 or 4971764-442823 resume=sethook end else tonumber=nil include=unsigned(include)new=unsigned(new)require=unsigned(require)signed=unsigned(signed)code=unsigned(code)getlocal=unsigned(getlocal)double=547793-426834 end else if double<5619434-(-920126)then loader=_G[upvalueid]print=flush(-614979+583653)print=loader[print]double=13270136-596188 print=print(loader)path=#print loader=550412+-550411 array=path>=loader gethook=array else hooks=nil resume=flush(741787+-772838)double=yield[resume]setupvalue=double resume=_G[data[-873983+873984]]double=4681098-290273 getupvalue=resume end end end else if double<6334906-(-518669)then if double<7698652-947466 then if double<-352300+7081356 then if double<7376435-706546 then class,b=long(c,class)double=class and 13978076-(-935810)or 549732+1000866 else double=float double=resume and 2634826-(-347932)or 15726366-624574 end else resume=flush(991666+-1022722)debug=flush(-882027+850870)double=yield[resume]resume=double(debug)double=yield[flush(139441+-170882)]resume={}end else if double<854094+5926781 then factory=nil i=nil double=-967396+1247886 arr=nil float=nil else _G[hooks]=sethook string=452257+-452256 j=_G[signed]assert=j+string xpcall=tonumber[assert]create=const+xpcall xpcall=-207630-(-207886)double=create%xpcall assert=_G[getlocal]const=double double=6305464-(-179963)xpcall=rawset+assert assert=385223-384967 create=xpcall%assert rawset=create end end else if double<7537013-484437 then if double<369247+6534817 then debug=flush(-17551-13461)double=_G[data[456787+-456783]]debug=double[debug]resume={debug(double)}double=yield[flush(357181-388417)]resume={program(resume)}else double=true double=double and 249598+4462726 or-164166-(-367562)end else if double<420712+6703508 then i=_G[tostring]rawset=_G[data[365551+-365549]]double=3864689-(-906734)hookfunction=flush(1016561-1047575)getmetatable=2347526146183-(-654270)key=_G[data[1037624+-1037621]]packages=key(hookfunction,getmetatable)const=rawset[packages]float=i[const]i=nil arr=float==i resume=arr else resume=float double=i double=float and-234862+2058641 or 13289127-(-115935)end end end end end end end else if double<1010227+11611976 then if double<378798+9361723 then if double<7821646-(-952399)then if double<-779756+8786402 then if double<-1034902+8896597 then if double<8050577-748466 then if double<-550314+7831556 then if double<7233160-86299 then resume=flush(687179-718258)double=_G[data[-739653-(-739657)]]resume=double[resume]resume=resume(double)double=_G[data[317946-317941]]resume=flush(-110362-(-79350))resume=double[resume]resume=resume(double)double=4167968-(-798702)else double=-533668+7218688 i=not arr resume=i end else debug=setuservalue hooks=isLinux()double=true factory=flush(-99532-(-68318))_G[hooks]=double setupvalue=flush(498645+-530001)resume=yield[setupvalue]getupvalue=isLinux()setupvalue=flush(691851+-722913)double=resume[setupvalue]setlocal=isLinux()setupvalue=isLinux()_G[setupvalue]=double double=ipairs(7599759-865324,{})_G[getupvalue]=double double=false _G[setlocal]=double tostring=yield[factory]arr=cls(601261+8310421,{setlocal})factory=tostring(arr)resume=factory double=factory and 7280701-(-951109)or 6946137-837452 end else if double<725229+6665753 then packages=-115663+115663 key=packages new=flush(67090-98210)code=11528311370939-1007555 hookfunction=double exports=_G[data[359293-359289]]require=_G[data[435174-435172]]getlocal=_G[data[499034+-499031]]signed=getlocal(new,code)new=737359+22254392010796 include=require[signed]module=exports[include]signed=flush(-85767-(-54323))include=_G[data[985678-985676]]require=_G[data[2059+-2056]]getlocal=require(signed,new)exports=include[getlocal]Factory=module[exports]getmetatable=not Factory double=getmetatable and-441870+5129548 or 5340055-774097 packages=getmetatable else setlocal=setupvalue getmetatable=-218572+8055940097139 hookfunction=flush(-608491+577207)const=flush(457529+-488885)resume=isLinux()_G[resume]=tostring i=yield[const]rawset=_G[data[851546-851544]]tostring=resume factory=double Factory=flush(928490-959749)key=_G[data[216215-216212]]module=-650871+15066196511198 packages=key(hookfunction,getmetatable)const=rawset[packages]float=i[const]rawset=_G[tostring]packages=_G[data[-602216+602218]]hookfunction=_G[data[-179034-(-179037)]]getmetatable=hookfunction(Factory,module)Factory=9489231919553-(-612225)key=packages[getmetatable]const=rawset[key]key=_G[data[113479-113477]]packages=_G[data[752437-752434]]getmetatable=flush(-881540+850569)hookfunction=packages(getmetatable,Factory)rawset=key[hookfunction]i=float(const,rawset)arr=not i resume=arr double=arr and-255047+1476088 or 15480887-563832 end end else if double<7975368-44863 then if double<6917547-(-989355)then if double<-6826+7886575 then debug=unsigned(debug)resume={}double=yield[flush(-727192+695875)]else double=yield[flush(420216-451376)]resume={}end else Factory=flush(-18764-12642)getmetatable=yield[Factory]module=_G[data[-841484+841486]]require=flush(-511179-(-479874))getlocal=33448131978928-190937 exports=_G[data[-478477+478480]]include=exports(require,getlocal)Factory=module[include]hookfunction=getmetatable[Factory]getmetatable=hookfunction()Factory=_G[data[-1038615+1038620]]getlocal=flush(468299+-499426)exports=_G[data[340357+-340355]]include=_G[data[299545-299542]]signed=309424+33267546801107 require=include(getlocal,signed)double=1862472-(-270470)getlocal=34848878858737-545422 module=exports[require]getmetatable=Factory[module]module=_G[data[614006-614004]]exports=_G[data[300076+-300073]]require=flush(579619+-611089)include=exports(require,getlocal)Factory=module[include]hookfunction=getmetatable[Factory]getmetatable=flush(-203890-(-172409))getmetatable=hookfunction[getmetatable]getmetatable=getmetatable(hookfunction,tostring)end else if double<7770622-(-177047)then setupvalue,tostring=getupvalue(hooks,setupvalue)double=setupvalue and 7983903-132059 or 19989+6177075 else double=5745437-(-530360)end end end else if double<-951246+9224519 then if double<8187750-(-14172)then if double<7577545-(-575594)then if double<-901446+9009675 then i=_G[data[524086-524084]]key=flush(541512-572819)double=11922994-(-304834)packages=829603+30955931094955 const=_G[data[190608-190605]]rawset=const(key,packages)float=i[rawset]arr=tostring[float]float=nil resume=arr==float else xpcall=7518496618390-(-939543)hookfunction=flush(111880+-143077)load=17046383212799-1038846 rawset=yield[hookfunction]include=flush(-795113-(-763828))long=885605+34660610636711 exports=yield[include]signed=_G[hooks]new=_G[getupvalue]c=683328+24826224934888 tonumber=flush(-1052110-(-1020833))assert=19686713447043-(-561484)code=new(tonumber,xpcall)getlocal=signed[code]signed=flush(91732-122910)signed=exports[signed]xpcall=flush(-433822-(-402708))include={signed(exports,getlocal)}lines=3542293038950-262389 hookfunction=rawset(program(include))rawset=hookfunction()getlocal=flush(-287366+256081)hookfunction=isLinux()exports=flush(-566207-(-535010))_G[hookfunction]=rawset rawset=yield[exports]include=yield[getlocal]new=_G[hooks]code=_G[getupvalue]tonumber=code(xpcall,assert)signed=new[tonumber]short=575317+32080894063365 string=1024755+28659649122606 j=23908470358335-(-993854)new=flush(-1032256-(-1001078))new=include[new]assert=flush(90123-121098)getlocal={new(include,signed)}include=flush(380760-411957)exports=rawset(program(getlocal))rawset=exports()exports=yield[include]signed=flush(-69980+38695)getlocal=yield[signed]code=_G[hooks]tonumber=_G[getupvalue]xpcall=tonumber(assert,j)new=code[xpcall]code=flush(-98503+67325)code=getlocal[code]j=10754316274248-227001 signed={code(getlocal,new)}include=exports(program(signed))exports=include()include=_G[hookfunction]void=flush(1009033-1040432)code=_G[hooks]assert=flush(-655464-(-624270))tonumber=_G[getupvalue]xpcall=tonumber(assert,j)new=code[xpcall]tonumber=_G[hooks]xpcall=_G[getupvalue]tmpname=549222+7403833175057 j=flush(-913397-(-882001))assert=xpcall(j,string)string=flush(-438185-(-406701))code=tonumber[assert]xpcall=_G[hooks]assert=_G[getupvalue]j=assert(string,short)gethook=flush(621889-653034)tonumber=xpcall[j]assert=_G[hooks]short=flush(691417+-722383)j=_G[getupvalue]string=j(short,long)long=flush(-332755-(-301752))xpcall=assert[string]j=_G[hooks]string=_G[getupvalue]short=string(long,lines)assert=j[short]short=_G[hooks]j=-688749+688909 long=_G[getupvalue]byte=flush(-261116+229889)lines=long(byte,tmpname)string=short[lines]getlocal=flush(-970662-(-939392))lines=flush(690461+-721911)long=yield[lines]byte=_G[hooks]tmpname=_G[getupvalue]delete=tmpname(void,load)lines=byte[delete]short=long[lines]delete=flush(-874866+843441)void=33405822606886-(-1023645)byte=661330-660950 lines=390827-390227 long=short(lines,byte)lines=_G[hooks]byte=_G[getupvalue]export=-1690+30918027116247 tmpname=byte(delete,void)short=lines[tmpname]class=19161778218371-590505 tmpname=_G[hooks]load=flush(-427205-(-395694))lines=false delete=_G[getupvalue]void=delete(load,export)byte=tmpname[void]delete=_G[hooks]void=_G[getupvalue]export=flush(-200963-(-169942))load=void(export,c)c=flush(-337071+306011)tmpname=delete[load]void=_G[hooks]load=_G[getupvalue]export=load(c,class)c=flush(-86732-(-55487))delete=void[export]export=yield[c]class=_G[hooks]traceback=11087372158184-(-741186)getlocal=include[getlocal]b=_G[getupvalue]upvalueid=b(gethook,traceback)c=class[upvalueid]load=export[c]c=_G[hooks]class=_G[getupvalue]upvalueid=flush(-1040735-(-1009566))gethook=-751212+27541322164356 b=class(upvalueid,gethook)export=c[b]void=load[export]signed={[new]=code,[tonumber]=xpcall;[assert]=j;[string]=long,[short]=lines;[byte]=tmpname,[delete]=void}byte=-18342+30354786582237 getlocal=getlocal(include,signed)new=_G[hooks]short=24773475013895-(-645129)code=_G[getupvalue]xpcall=flush(-1029949+998611)string=flush(-902404-(-871117))assert=33599055054739-19062 tonumber=code(xpcall,assert)signed=new[tonumber]void=3870490101642-(-507776)xpcall=_G[hooks]assert=_G[getupvalue]load=13675733727181-483053 j=assert(string,short)long=15699976624428-31902 short=flush(-687039+655657)tonumber=xpcall[j]assert=_G[hooks]j=_G[getupvalue]new=flush(-756298+724978)string=j(short,long)lines=30503894654713-206717 xpcall=assert[string]j=_G[hooks]string=_G[getupvalue]long=flush(-228+-30799)short=string(long,lines)assert=j[short]string=_G[hooks]short=_G[getupvalue]tmpname=-579902+20673052786392 lines=flush(420108+-451458)export=6188424833634-(-450783)long=short(lines,byte)new=getlocal[new]j=string[long]delete=-588369+13761487344473 byte=-970028+29116747153954 code={[tonumber]=xpcall,[assert]=j}new=new(getlocal,code)string=-300771+2509846518643 tonumber=_G[hooks]lines=18052105590024-177202 xpcall=_G[getupvalue]j=flush(-628127+596678)assert=xpcall(j,string)code=tonumber[assert]j=_G[hooks]string=_G[getupvalue]long=flush(765908+-797395)tonumber=flush(281350+-312670)short=string(long,lines)assert=j[short]lines=flush(674816+-706107)string=_G[hooks]short=_G[getupvalue]long=short(lines,byte)byte=flush(496731+-528188)tonumber=getlocal[tonumber]j=string[long]short=_G[hooks]long=_G[getupvalue]lines=long(byte,tmpname)string=short[lines]tmpname=flush(245940-277259)long=_G[hooks]lines=_G[getupvalue]byte=lines(tmpname,delete)short=long[byte]delete=23099983031693-(-752759)xpcall={[assert]=j;[string]=short}long=481+31956613134399 tonumber=tonumber(getlocal,xpcall)assert=_G[hooks]short=flush(38858-70107)j=_G[getupvalue]string=j(short,long)xpcall=assert[string]short=_G[hooks]byte=flush(411278-442328)long=_G[getupvalue]tmpname=33361002810424-790410 lines=long(byte,tmpname)string=short[lines]tmpname=flush(109081-140545)long=_G[hooks]lines=_G[getupvalue]byte=lines(tmpname,delete)short=long[byte]delete=flush(616561-647923)lines=_G[hooks]byte=_G[getupvalue]assert=flush(-560481+529161)tmpname=byte(delete,void)long=lines[tmpname]assert=getlocal[assert]void=flush(193575-224918)byte=_G[hooks]tmpname=_G[getupvalue]delete=tmpname(void,load)lines=byte[delete]j={[string]=short;[long]=lines}assert=assert(getlocal,j)string=_G[hooks]lines=flush(105994-137386)byte=37465+30618481304920 short=_G[getupvalue]long=short(lines,byte)delete=flush(-830443+799199)load=715903+2399831791582 j=string[long]void=23557204771972-154027 lines=_G[hooks]byte=_G[getupvalue]tmpname=byte(delete,void)c=17032483352439-675964 long=lines[tmpname]void=flush(622331-653465)byte=_G[hooks]tmpname=_G[getupvalue]string=flush(519924-551244)delete=tmpname(void,load)lines=byte[delete]tmpname=_G[hooks]load=flush(40342-71835)delete=_G[getupvalue]void=delete(load,export)byte=tmpname[void]delete=_G[hooks]string=getlocal[string]export=flush(-115929-(-84960))void=_G[getupvalue]load=void(export,c)tmpname=delete[load]short={[long]=lines;[byte]=tmpname}string=string(getlocal,short)include={[signed]=new;[code]=tonumber;[xpcall]=assert,[j]=string}new=_G[hookfunction]tonumber=_G[hooks]string=34480726156345-(-989823)xpcall=_G[getupvalue]j=flush(-650413+619375)assert=xpcall(j,string)code=tonumber[assert]signed=new[code]new=isLinux()_G[new]=signed string=5664664874333-172816 tonumber=_G[hooks]xpcall=_G[getupvalue]j=flush(-1070271-(-1038828))assert=xpcall(j,string)code=tonumber[assert]signed=tostring[code]double=signed and 5480005-(-642260)or 2599+2206331 end else hooks=flush(-905402-(-873996))resume=yield[hooks]setupvalue=_G[data[-579596+579598]]tostring=flush(-268089-(-236768))factory=10402477130876-864656 getupvalue=_G[data[391707+-391704]]setlocal=getupvalue(tostring,factory)float=flush(448407+-479889)hooks=setupvalue[setlocal]double=resume[hooks]i=-378476+15465815827085 resume=double()resume=flush(667901-698952)double=yield[resume]getupvalue=_G[data[236503+-236499]]tostring=_G[data[-921472+921474]]factory=_G[data[354266-354263]]arr=factory(float,i)setlocal=tostring[arr]setupvalue=getupvalue[setlocal]float=440451+24707876566126 arr=flush(649404+-680489)setlocal=_G[data[811566+-811564]]tostring=_G[data[-979266+979269]]factory=tostring(arr,float)getupvalue=setlocal[factory]arr=-48023+24352207972322 hooks=setupvalue[getupvalue]getupvalue=_G[data[-985209+985211]]factory=flush(784345+-815828)setlocal=_G[data[-561649-(-561652)]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]getupvalue=flush(527265+-558591)resume=hooks[setupvalue]getupvalue=resume[getupvalue]getupvalue={getupvalue(resume)}hooks=getupvalue[862055-862054]setupvalue=getupvalue[89276-89274]getupvalue=double double=1012006+4148210 end else if double<-680643+8951485 then tostring=_G[setlocal]double=426250+5682435 resume=tostring else double=hooks double=resume and 6126693-(-149104)or 967090+8407994 end end else if double<-612364+8962570 then if double<-263509+8590584 then if double<7311975-(-1009118)then double=gethook double=upvalueid and 3287408-1031956 or 9005301-(-8947)else double=33130+15285509 end else tostring=nil setlocal=nil double=9139248-(-882945)factory=nil end else if double<9553549-894644 then tostring=nil factory=nil double=4437531-(-722685)setlocal=nil else class=flush(87582+-118833)path=25633805833925-747557 c=double array=flush(-852356+821371)upvalueid=_G[hooks]delete=void gethook=_G[getupvalue]traceback=gethook(array,path)b=upvalueid[traceback]class=load[class]class=class(load,b)double=class and-128084+1283534 or 75645+3583736 export=class end end end end else if double<-987484+10076325 then if double<788573+8129389 then if double<7955890-(-874328)then if double<7984506-(-831319)then if double<9362069-567015 then hooks=_G[data[-161671+161673]]setupvalue=_G[data[967696+-967693]]double=-835264+2574561 debug=hooks==setupvalue resume=debug else _G[hooks]=getmetatable double=_G[hooks]double=double and 20050+1347669 or-261578+4495808 end else code=flush(799534-830559)include=_G[data[555197-555193]]getlocal=_G[data[818002-818000]]tonumber=3334044525378-(-352974)getmetatable=double signed=_G[data[325604-325601]]new=signed(code,tonumber)require=getlocal[new]exports=include[require]require=_G[data[-539024-(-539026)]]code=-296499+4281742495228 getlocal=_G[data[191848+-191845]]new=flush(-603823+572438)signed=getlocal(new,code)include=require[signed]module=exports[include]Factory=not module hookfunction=Factory double=Factory and-1031205+15871072 or 88908+2373532 end else if double<868339+8025865 then setupvalue=flush(370616+-402062)hooks=yield[setupvalue]resume=hooks double=-384947+6567366 else double=true _G[data[-89274-(-89275)]]=double double=yield[flush(-576847-(-545712))]resume={}end end else if double<9209067-161531 then if double<9301130-275988 then if double<8472872-(-502928)then hooks=flush(-284488-(-253082))resume=yield[hooks]setupvalue=_G[data[18226-18224]]factory=905773+10908640543146 getupvalue=_G[data[175970+-175967]]tostring=flush(5604+-36593)setlocal=getupvalue(tostring,factory)getupvalue=flush(-19081+-12339)hooks=setupvalue[setlocal]double=resume[hooks]resume=double()resume=flush(799224-830275)double=yield[resume]resume=_G[data[647440+-647436]]getupvalue=resume[getupvalue]getupvalue={getupvalue(resume)}hooks=getupvalue[285403+-285402]setupvalue=getupvalue[503299+-503297]getupvalue=double double=10783321-761128 else double=-862117+7502408 load=nil b=unsigned(b)end else double=yield[flush(-104187+72774)]debug=nil resume={}end else if double<10056208-1004078 then signed=flush(-1075602-(-1044505))new=23445411426573-(-31128)packages=double module=_G[data[490813-490812]]include=_G[data[-87594-(-87596)]]require=_G[data[236880-236877]]getlocal=require(signed,new)signed=18121255820720-(-525126)exports=include[getlocal]Factory=module[exports]exports=_G[data[976273+-976271]]getlocal=flush(410192+-441262)include=_G[data[3477+-3474]]require=include(getlocal,signed)module=exports[require]getmetatable=Factory[module]getlocal=27589105633664-251729 module=_G[data[-27139-(-27141)]]exports=_G[data[-291802-(-291805)]]require=flush(-1004315-(-972809))include=exports(require,getlocal)Factory=module[include]hookfunction=getmetatable==Factory key=hookfunction double=hookfunction and 1016176+1802007 or-647431+3774346 else Factory=25047565027668-662469 const=_G[data[-955921-(-955922)]]key=_G[data[493940-493938]]factory=double getmetatable=flush(-1032067+1000856)packages=_G[data[226467-226464]]hookfunction=packages(getmetatable,Factory)rawset=key[hookfunction]i=const[rawset]rawset=_G[data[1002552+-1002550]]getmetatable=926073+23425277348131 key=_G[data[-722552+722555]]hookfunction=flush(-264476-(-233412))packages=key(hookfunction,getmetatable)const=rawset[packages]float=i[const]arr=not float double=arr and 5349184-577761 or 314225+6804690 resume=arr end end end else if double<-858141+10246440 then if double<282632+9024862 then if double<437181+8838284 then if double<9144436-(-62997)then packages=_G[data[-904934+904936]]module=405319+22249698097457 Factory=flush(750221-781273)hookfunction=_G[data[926881+-926878]]getmetatable=hookfunction(Factory,module)Factory=flush(-391195+359913)rawset=flush(-132870+101733)rawset=debug[rawset]key=packages[getmetatable]rawset=rawset(debug,key)packages=_G[data[372025-372023]]hookfunction=_G[data[13169+-13166]]module=21125721477230-469505 getmetatable=hookfunction(Factory,module)key=packages[getmetatable]const=rawset[key]rawset=flush(-871174-(-840037))float=const signed=flush(341541+-372623)packages=_G[data[-77360+77362]]Factory=flush(-288450-(-257073))rawset=debug[rawset]module=-577407+33079333866410 hookfunction=_G[data[-417352-(-417355)]]getmetatable=hookfunction(Factory,module)key=packages[getmetatable]rawset=rawset(debug,key)packages=_G[data[-78022-(-78024)]]module=9319718872676-(-273039)Factory=flush(-189402+158408)hookfunction=_G[data[410696-410693]]getmetatable=hookfunction(Factory,module)key=packages[getmetatable]const=rawset[key]rawset=double i=const hookfunction=flush(-880363+849289)packages=yield[hookfunction]module=_G[data[-133878-(-133879)]]include=_G[data[-174837+174839]]require=_G[data[-998365-(-998368)]]new=18175868037748-(-587419)getlocal=require(signed,new)exports=include[getlocal]Factory=module[exports]exports=_G[data[985491-985489]]include=_G[data[492750+-492747]]getlocal=flush(-58184+26808)signed=978790+2458953979155 require=include(getlocal,signed)module=exports[require]getmetatable=Factory[module]hookfunction=packages(getmetatable)getmetatable=flush(764444+-795518)packages=yield[getmetatable]getmetatable=packages(float)key=hookfunction<=getmetatable double=key and 8239650-(-811805)or 219828+5640403 const=key else setupvalue=_G[data[24460-24456]]setlocal=_G[data[-929434-(-929436)]]arr=flush(-381541-(-350276))tostring=_G[data[834808+-834805]]float=-369944+32570013884502 factory=tostring(arr,float)arr=-646599+28220056162587 getupvalue=setlocal[factory]hooks=setupvalue[getupvalue]double=1026674+1285180 factory=flush(29091-60386)getupvalue=_G[data[702843+-702841]]setlocal=_G[data[-615165-(-615168)]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]debug=hooks~=setupvalue resume=debug end else key=flush(-672962+641633)double=6831403-(-308080)rawset=yield[key]key=flush(-574242+543099)const=rawset[key]float=const end else if double<881801+8472995 then setupvalue=setupvalue+setlocal hooks=setupvalue<=getupvalue factory=not tostring hooks=factory and hooks factory=setupvalue>=getupvalue factory=tostring and factory hooks=factory or hooks factory=11334277-809334 double=hooks and factory hooks=1522109-1044015 double=double or hooks else hooks=957040-956980 double=937255+-937254 debug+=double resume=debug>=hooks double=resume and 99786+7859871 or 11877946-523859 end end else if double<8792832-(-717327)then if double<10007403-508132 then float=flush(-552257+521206)arr=yield[float]getmetatable=flush(-529490-(-498057))const=_G[data[-504757-(-504761)]]Factory=706980+27530472515695 key=_G[data[-891190-(-891192)]]packages=_G[data[-200040+200043]]hookfunction=packages(getmetatable,Factory)rawset=key[hookfunction]hookfunction=flush(-72366-(-40865))getmetatable=379680+17242241160253 i=const[rawset]rawset=_G[data[896201+-896199]]key=_G[data[-959186+959189]]packages=key(hookfunction,getmetatable)double=2314010-594312 const=rawset[packages]float=i[const]i=nil else load=nil delete=nil double=15015665-(-554386)end else if double<-991100+10604163 then setlocal=hooks i=_G[data[-391383-(-391385)]]packages=-749862+613032686147 const=_G[data[458746+-458743]]key=flush(313551-344869)rawset=const(key,packages)float=i[rawset]arr=setlocal[float]hookfunction=138283+2884453787924 key=flush(734917-766364)i=_G[data[-158614+158616]]const=_G[data[-81168+81171]]packages=14955504422232-(-429532)rawset=const(key,packages)packages=flush(-482015+450833)float=i[rawset]factory=arr[float]const=_G[data[750579-750577]]rawset=_G[data[615480-615477]]key=rawset(packages,hookfunction)packages=flush(-674881-(-643391))hookfunction=5509599110888-416995 i=const[key]float=factory[i]const=_G[data[-681388+681390]]rawset=_G[data[719786-719783]]key=rawset(packages,hookfunction)i=const[key]arr=float~=i double=arr and 324930+9137504 or-843340+15270153 else double=yield[flush(380768-412196)]resume={}end end end end end else if double<-1034544+11673834 then if double<271985+9781442 then if double<9961540-7916 then if double<9435538-(-402720)then if double<83710+9743991 then if double<-573799+10373343 then debug=_G[data[-116662-(-116663)]]factory=-117013+409219975635 tostring=flush(-675459+644425)setupvalue=_G[data[193609-193607]]getupvalue=_G[data[-55743-(-55746)]]setlocal=getupvalue(tostring,factory)hooks=setupvalue[setlocal]setlocal=flush(-587906-(-556825))tostring=-863975+30824315315960 resume=debug[hooks]hooks=_G[data[589867+-589865]]setupvalue=_G[data[-370041-(-370044)]]getupvalue=setupvalue(setlocal,tostring)debug=hooks[getupvalue]double=resume[debug]resume=flush(-16013+-15299)debug=_G[data[580140+-580136]]resume=double[resume]resume=resume(double,debug)resume={}double=yield[flush(702910-734329)]else key=not float double=13702769-(-176620)const=key end else float=flush(245857-277263)arr=yield[float]i=_G[data[642739+-642737]]key=flush(-69083-(-38017))const=_G[data[-902922+902925]]packages=10865104112928-(-149155)rawset=const(key,packages)float=i[rawset]resume=arr[float]arr=resume()arr=_G[data[483748-483743]]key=flush(-85581+54338)i=_G[data[187117+-187115]]const=_G[data[-308953-(-308956)]]packages=13057143050096-227248 rawset=const(key,packages)packages=1005818+8395110512203 float=i[rawset]resume=arr[float]key=flush(308853+-340051)i=_G[data[709561+-709559]]const=_G[data[-160048-(-160051)]]rawset=const(key,packages)arr=flush(-43171+12045)arr=resume[arr]float=i[rawset]arr=arr(resume,float)float=double i=_G[data[3765+-3759]]double=i and-892849+7577869 or 822076+6353924 resume=i end else if double<-5129+9853606 then getupvalue=flush(-973252-(-942076))setupvalue=yield[getupvalue]hooks=debug==setupvalue double=hooks and 8272948-(-612879)or 7171589-989170 resume=hooks else tostring=flush(971141+-1002366)debug=isLinux()hooks=flush(732479+-763885)_G[debug]=setuservalue[350946-350945]resume=yield[hooks]setupvalue=_G[data[-217997+217998]]getupvalue=_G[data[585111+-585109]]factory=651581+9384242651092 setlocal=getupvalue(tostring,factory)hooks=setupvalue[setlocal]double=resume[hooks]hooks=loadlib(15611116-462304,{data[752471-752468],debug,data[3860-3859],data[-866565+866567]})debug=unsigned(debug)resume=double(hooks)resume={}double=yield[flush(-511872+480668)]end end else if double<8970732-(-1042805)then if double<859037+9120551 then if double<112548+9858173 then debug=setuservalue[171971+-171970]double=not debug double=double and 1047639+11536336 or 277551+13747080 else hooks=flush(-495681+464691)setupvalue=924854+34570 resume=5464648-(-570563)debug=hooks^setupvalue double=resume-debug resume=flush(530664+-561693)debug=double double=resume/debug resume={double}double=yield[flush(-960700-(-929282))]end else hookfunction=flush(1008101-1039298)xpcall=15499103349927-20598 rawset=yield[hookfunction]include=flush(491091+-522376)exports=yield[include]signed=_G[hooks]tonumber=flush(883168-914654)new=_G[getupvalue]code=new(tonumber,xpcall)getlocal=signed[code]signed=flush(755624-786802)signed=exports[signed]include={signed(exports,getlocal)}double=yield[flush(-458419+426928)]hookfunction=rawset(program(include))rawset={hookfunction()}resume={program(rawset)}end else if double<524057+9521961 then setupvalue,tostring=getupvalue(hooks,setupvalue)double=setupvalue and 60994+4091507 or 1196300-103109 else resume={hooks}double=yield[flush(979576+-1010824)]end end end else if double<9814409-(-652462)then if double<340609+9993629 then if double<9256862-(-999400)then if double<-308686+10371599 then setupvalue=_G[data[569739-569735]]arr=flush(-922402+890890)setlocal=_G[data[289717+-289715]]float=-31707+8251431897821 tostring=_G[data[-3336-(-3339)]]factory=tostring(arr,float)getupvalue=setlocal[factory]hooks=setupvalue[getupvalue]getupvalue=_G[data[955447+-955445]]double=-523663+15254870 factory=flush(845038-876390)arr=34447063301752-(-622640)setlocal=_G[data[-885979+885982]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]debug=hooks~=setupvalue resume=debug else double=yield[flush(-167221+136122)]resume={}end else setupvalue=flush(-289074-(-257745))hooks=yield[setupvalue]double=yield[flush(172431-203944)]setupvalue=flush(1012320-1043507)debug=hooks[setupvalue]setupvalue=_G[data[-718597-(-718598)]]hooks={debug(setupvalue)}resume={program(hooks)}end else if double<-774890+11143640 then arr=-11781+29207789183781 hooks=flush(-1011566-(-980160))resume=yield[hooks]tostring=flush(41108+-72481)setupvalue=_G[data[-281997-(-281999)]]factory=4663719671006-93283 getupvalue=_G[data[-213483-(-213486)]]setlocal=getupvalue(tostring,factory)hooks=setupvalue[setlocal]double=resume[hooks]resume=double()resume=flush(642836-673887)double=yield[resume]factory=flush(-978656-(-947486))hooks=_G[data[-451542+451546]]getupvalue=_G[data[41647-41645]]setlocal=_G[data[212283-212280]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]resume=hooks[setupvalue]getupvalue=flush(-895434-(-864108))getupvalue=resume[getupvalue]getupvalue={getupvalue(resume)}hooks=getupvalue[119951+-119950]setupvalue=getupvalue[-864875-(-864877)]getupvalue=double double=8380585-441569 else double=yield[flush(-727594-(-696475))]resume={}end end else if double<10333149-(-212102)then if double<357350+10171391 then float=314617-314362 double=_G[data[-117972+117973]]arr=320851-320851 hooks=setupvalue factory=double(arr,float)debug[hooks]=factory hooks=nil double=9878974-548638 else key=not rawset i=i+const arr=i<=float arr=key and arr key=i>=float key=rawset and key arr=key or arr key=28757+4237147 double=arr and key arr=422961+-12920 double=double or arr end else if double<-475508+11060939 then resume={}double=yield[flush(-929128-(-897691))]debug=nil else factory=nil setlocal=nil double=14783152-558369 tostring=nil end end end end else if double<297845+11293632 then if double<-683730+11910547 then if double<11362896-473878 then if double<11260482-404911 then if double<10678681-(-154624)then double=_G[data[-327946-(-327950)]]hooks=flush(707549+-738561)hooks=double[hooks]resume={hooks(double)}resume={program(resume)}double=yield[flush(-144467+113032)]else double=349763+2778286 end else packages=238794+-238793 key+=packages getmetatable=-527243-(-527303)hookfunction=key>=getmetatable double=hookfunction and 14320671-84108 or 757403+7157083 end else if double<412392+10672473 then const=i key=const~=tostring double=key and 5153853-(-633095)or 1533960-491774 else b,upvalueid=long(class,b)double=b and 10694593-(-937168)or 11406075-(-28546)end end else if double<-197192+11620864 then if double<-821085+12191948 then if double<11030173-(-321697)then exports=not key rawset=exports double=13709893-825205 else setupvalue=flush(667501+-698907)hooks=yield[setupvalue]i=24281494274248-431262 float=33463506642006-26488 arr=11350357360301-(-382456)getupvalue=_G[data[487445-487443]]factory=flush(518587+-549597)setlocal=_G[data[1040996+-1040993]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]resume=hooks[setupvalue]hooks=resume()setupvalue=_G[data[78521-78515]]arr=flush(-971149+939908)double=-636536+4245170 setlocal=_G[data[664681+-664679]]tostring=_G[data[-872306+872309]]factory=tostring(arr,float)arr=23263014307630-(-1008418)getupvalue=setlocal[factory]factory=flush(-930693-(-899538))float=flush(918153+-949456)hooks=setupvalue[getupvalue]getupvalue=_G[data[-824433+824435]]setlocal=_G[data[-471994+471997]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]resume=hooks[setupvalue]getupvalue=_G[data[-526117-(-526122)]]tostring=_G[data[87820-87818]]factory=_G[data[892727+-892724]]arr=factory(float,i)setlocal=tostring[arr]setupvalue=getupvalue[setlocal]hooks=flush(119873-151354)hooks=resume[hooks]hooks=hooks(resume,setupvalue)end else j=928973+-928972 create=double assert=tonumber[j]j=false xpcall=assert==j double=xpcall and-432525+14361328 or 4679922-(-231923)sethook=xpcall end else if double<11391003-(-57875)then class=_G[hooks]path=flush(363474-394797)gethook=flush(892607-923813)b=_G[getupvalue]pcall=14845907705699-(-637854)traceback=-645955+5522763212110 upvalueid=b(gethook,traceback)loader=-258721+60105323196 c=class[upvalueid]long=include[c]b=_G[hooks]traceback=flush(605533-636999)upvalueid=_G[getupvalue]game=22252856311319-349597 gsub=-896077+18396040531395 array=248509+8641020249338 gethook=upvalueid(traceback,array)print=-206119+17153529136218 class=b[gethook]gethook=_G[hooks]traceback=_G[getupvalue]array=traceback(path,loader)upvalueid=gethook[array]loader=flush(-517644+486536)traceback=_G[hooks]array=_G[getupvalue]c=flush(-507646-(-476568))path=array(loader,print)gethook=traceback[path]array=_G[hooks]print=flush(268978-300476)path=_G[getupvalue]loader=path(print,gsub)traceback=array[loader]path=_G[hooks]loader=_G[getupvalue]gsub=flush(-523036+492069)print=loader(gsub,pcall)c=long[c]array=path[print]loader=_G[hooks]randomseed=-323550+17881417355364 print=_G[getupvalue]pcall=flush(-696660-(-665678))gsub=print(pcall,randomseed)path=loader[gsub]loader=false b={[upvalueid]=gethook,[traceback]=array,[path]=loader}c=c(long,class,b)class=status(2503473-(-797008),{load;hooks,getupvalue;new,tonumber})loader=-374325+25130150798315 long=flush(-59720-(-28747))long=c[long]gethook=flush(814329+-845767)traceback=711552+14125691584049 long=long(c,class)class=_G[hooks]b=_G[getupvalue]upvalueid=b(gethook,traceback)import=6324651660525-919916 c=class[upvalueid]array=35129760665614-839720 long=include[c]print=-488300+23239233887665 b=_G[hooks]traceback=flush(-117261+86129)upvalueid=_G[getupvalue]gethook=upvalueid(traceback,array)path=flush(314625+-345991)class=b[gethook]gethook=_G[hooks]traceback=_G[getupvalue]array=traceback(path,loader)loader=flush(18523-49868)upvalueid=gethook[array]traceback=_G[hooks]pcall=flush(119877+-151349)array=_G[getupvalue]randomseed=-937108+26090763107337 path=array(loader,print)gsub=2551922630154-(-616090)gethook=traceback[path]array=_G[hooks]print=flush(-788052-(-756754))path=_G[getupvalue]loader=path(print,gsub)traceback=array[loader]array=_G[load]loader=_G[hooks]print=_G[getupvalue]gsub=print(pcall,randomseed)path=loader[gsub]wrap=flush(18182+-49266)loader=true gsub=_G[hooks]pcall=_G[getupvalue]randomseed=pcall(wrap,game)print=gsub[randomseed]gsub={}c=flush(616087-647334)b={[upvalueid]=gethook,[traceback]=array,[path]=loader;[print]=gsub}c=long[c]c=c(long,class,b)double=yield[flush(559209-590548)]class=_G[hooks]array=31333115109849-(-1021733)pcall=-56283+28059012386532 traceback=8492502977165-(-656613)setupvalue=unsigned(setupvalue)b=_G[getupvalue]path=flush(873017-903989)gethook=flush(-17274+-14014)upvalueid=b(gethook,traceback)c=class[upvalueid]long=include[c]traceback=flush(949569-980725)loader=-708957+19417992541359 b=_G[hooks]upvalueid=_G[getupvalue]randomseed=878009+17089924921693 game=-344926+28101058033275 gethook=upvalueid(traceback,array)class=b[gethook]gethook=_G[hooks]delete=unsigned(delete)traceback=_G[getupvalue]gsub=769218+1671505823304 array=traceback(path,loader)loader=flush(308548+-339721)print=-251898+17029820987124 upvalueid=gethook[array]traceback=_G[hooks]c=flush(-175819+144741)load=unsigned(load)array=_G[getupvalue]path=array(loader,print)gethook=traceback[path]array=_G[hooks]path=_G[getupvalue]print=flush(323803-355075)loader=path(print,gsub)traceback=array[loader]c=long[c]gsub=flush(790460+-821911)path=_G[hooks]loader=_G[getupvalue]print=loader(gsub,pcall)array=path[print]loader=_G[hooks]pcall=flush(-146162+114901)print=_G[getupvalue]gsub=print(pcall,randomseed)path=loader[gsub]loader=false b={[upvalueid]=gethook;[traceback]=array;[path]=loader}array=14644240308688-818989 c=c(long,class,b)loader=17986748459609-18850 class=ipairs(-119915+3165171,{xpcall,hooks;getupvalue,new;tonumber})code=nil path=flush(-31146-164)long=flush(-135203-(-104230))long=c[long]gethook=flush(830996-862144)long=long(c,class)randomseed=10861389438936-773143 traceback=-291009+29165683533262 class=_G[hooks]b=_G[getupvalue]upvalueid=b(gethook,traceback)traceback=flush(671748+-703177)gfind=flush(68430-99767)c=class[upvalueid]wrap=flush(-811152-(-779879))print=722384+11011131149879 long=include[c]b=_G[hooks]c=flush(-116685-(-85438))key=nil upvalueid=_G[getupvalue]c=long[c]gethook=upvalueid(traceback,array)class=b[gethook]gethook=_G[hooks]traceback=_G[getupvalue]pcall=flush(933088+-964226)array=traceback(path,loader)upvalueid=gethook[array]loader=flush(30015+-61072)traceback=_G[hooks]array=_G[getupvalue]gsub=16315746066156-(-16065)path=array(loader,print)print=flush(-1037914-(-1006520))gethook=traceback[path]array=_G[hooks]path=_G[getupvalue]loader=path(print,gsub)traceback=array[loader]array=_G[void]loader=_G[hooks]void=unsigned(void)print=_G[getupvalue]gsub=print(pcall,randomseed)path=loader[gsub]gsub=_G[hooks]pcall=_G[getupvalue]loader=true randomseed=pcall(wrap,game)print=gsub[randomseed]gsub={}pcall=24519168427463-399662 b={[upvalueid]=gethook,[traceback]=array;[path]=loader;[print]=gsub}loader=24852519993443-250671 game=13501318533853-(-886194)traceback=546727+35140781074500 c=c(long,class,b)array=22132068752001-225855 class=_G[hooks]b=_G[getupvalue]gethook=flush(-439055-(-407850))randomseed=20047807414006-(-632193)upvalueid=b(gethook,traceback)traceback=flush(591646-622971)print=423242+1478489574758 gsub=13837364243447-(-208180)c=class[upvalueid]path=flush(-688010+656977)long=include[c]b=_G[hooks]upvalueid=_G[getupvalue]gethook=upvalueid(traceback,array)class=b[gethook]gethook=_G[hooks]traceback=_G[getupvalue]array=traceback(path,loader)upvalueid=gethook[array]traceback=_G[hooks]array=_G[getupvalue]packages=nil loader=flush(285896+-317299)path=array(loader,print)print=flush(-175314+143839)gethook=traceback[path]array=_G[hooks]path=_G[getupvalue]loader=path(print,gsub)traceback=array[loader]wrap=1940255746336-173465 gsub=flush(214357-245854)path=_G[hooks]loader=_G[getupvalue]print=loader(gsub,pcall)array=path[print]loader=_G[hooks]print=_G[getupvalue]signed=unsigned(signed)arr=unsigned(arr)pcall=flush(-454985-(-423999))gsub=print(pcall,randomseed)path=loader[gsub]print=_G[hooks]gsub=_G[getupvalue]randomseed=flush(-339489+308049)pcall=gsub(randomseed,wrap)loader=print[pcall]c=flush(-745618-(-714182))wrap=flush(-764645+733126)gsub=_G[hooks]c=long[c]pcall=_G[getupvalue]randomseed=pcall(wrap,game)print=gsub[randomseed]gsub=false randomseed=_G[hooks]wrap=_G[getupvalue]game=wrap(gfind,import)pcall=randomseed[game]randomseed=false b={[upvalueid]=gethook,[traceback]=array,[path]=loader,[print]=gsub,[pcall]=randomseed}loader=27450371588083-(-160251)c=c(long,class,b)print=21386238833793-(-848485)gsub=879302+9886364100405 class=_G[hooks]traceback=-348710+23491278847200 b=_G[getupvalue]game=1031273+33331775406136 gethook=flush(849039-880037)wrap=23845193728530-(-928077)path=flush(-992889-(-961491))upvalueid=b(gethook,traceback)array=566644929397-(-904594)traceback=flush(48479-79554)c=class[upvalueid]long=include[c]j=nil b=_G[hooks]upvalueid=_G[getupvalue]gethook=upvalueid(traceback,array)class=b[gethook]pcall=flush(672935+-704168)gethook=_G[hooks]traceback=_G[getupvalue]tonumber=unsigned(tonumber)array=traceback(path,loader)upvalueid=gethook[array]loader=flush(114465+-145464)traceback=_G[hooks]array=_G[getupvalue]path=array(loader,print)lines=unsigned(lines)gethook=traceback[path]i=nil c=flush(763778+-795214)array=_G[hooks]path=_G[getupvalue]print=flush(-720351+688848)loader=path(print,gsub)factory=nil randomseed=-217347+10441868485633 traceback=array[loader]c=long[c]loader=_G[hooks]print=_G[getupvalue]array=-149013-(-149013)gsub=print(pcall,randomseed)path=loader[gsub]import=28563125209540-579024 tostring=nil print=_G[hooks]gfind=flush(-344945-(-313945))randomseed=flush(-387739-(-356382))gsub=_G[getupvalue]pcall=gsub(randomseed,wrap)loader=print[pcall]gsub=_G[hooks]pcall=_G[getupvalue]wrap=flush(248259-279667)randomseed=pcall(wrap,game)print=gsub[randomseed]randomseed=_G[hooks]gsub=true wrap=_G[getupvalue]game=wrap(gfind,import)pcall=randomseed[game]randomseed=false b={[upvalueid]=gethook;[traceback]=array,[path]=loader;[print]=gsub,[pcall]=randomseed}c=c(long,class,b)randomseed=169309+14205290611833 class=_G[hooks]print=34745424144566-747907 b=_G[getupvalue]array=-48731+9647677149159 traceback=-70913+16249928004239 gethook=flush(862983-894311)upvalueid=b(gethook,traceback)traceback=flush(-771832+740812)c=class[upvalueid]long=include[c]b=_G[hooks]loader=14051932151554-34163 path=flush(-297657-(-266666))upvalueid=_G[getupvalue]gethook=upvalueid(traceback,array)class=b[gethook]gsub=8216433747521-38735 gethook=_G[hooks]traceback=_G[getupvalue]pcall=8033243966182-711754 array=traceback(path,loader)upvalueid=gethook[array]traceback=_G[hooks]loader=flush(301038+-332387)array=_G[getupvalue]path=array(loader,print)gethook=traceback[path]array=_G[hooks]path=_G[getupvalue]print=flush(856390-887741)loader=path(print,gsub)c=flush(490277+-521355)gsub=flush(-783698+752609)byte=unsigned(byte)traceback=array[loader]path=_G[hooks]loader=_G[getupvalue]print=loader(gsub,pcall)c=long[c]array=path[print]loader=_G[hooks]const=unsigned(const)print=_G[getupvalue]pcall=flush(-793504+762191)gsub=print(pcall,randomseed)path=loader[gsub]loader=false b={[upvalueid]=gethook,[traceback]=array,[path]=loader}c=c(long,class,b)long=flush(962169-993142)long=c[long]class=ipairs(17166386-984025,{xpcall;hooks;getupvalue,new,assert})long=long(c,class)long=flush(-1031290+1000172)gethook=flush(792282-823412)long=getlocal[long]c=-553930-(-553931)long=long(getlocal,c)long=flush(-882255+851223)c=_G[hookfunction]long=rawset[long]long=long(rawset,c)new=unsigned(new)c=_G[hookfunction]long=flush(886229-917261)long=exports[long]long=long(exports,c)traceback=16819372551489-200361 long=flush(-1018913-(-987614))array=4605515306877-118557 long=rawset[long]hookfunction=unsigned(hookfunction)resume={}long=long(rawset)setlocal=unsigned(setlocal)long=flush(392624-423678)class=_G[hooks]getlocal=nil long=exports[long]b=_G[getupvalue]upvalueid=b(gethook,traceback)c=class[upvalueid]long=long(exports,c)traceback=flush(79309-110521)b=_G[hooks]upvalueid=_G[getupvalue]gethook=upvalueid(traceback,array)class=b[gethook]c=class..float array=4465322926072-(-796711)traceback=flush(-384408+353434)long=flush(-207670-(-176616))long=rawset[long]xpcall=unsigned(xpcall)long=long(rawset,c)b=_G[hooks]upvalueid=_G[getupvalue]gethook=upvalueid(traceback,array)array=23144023662928-571191 class=b[gethook]assert=unsigned(assert)c=include[class]traceback=flush(12468+-43784)long=flush(-588337-(-557003))long=exports[long]long=long(exports,c)b=_G[hooks]upvalueid=_G[getupvalue]long=flush(-753172-(-721850))gethook=upvalueid(traceback,array)exports=nil getupvalue=unsigned(getupvalue)long=rawset[long]class=b[gethook]c=include[class]long=long(rawset,c)long=flush(-193380-(-162417))float=nil long=rawset[long]long=long(rawset)hooks=unsigned(hooks)rawset=nil include=nil else exports=flush(470255-501286)double=yield[exports]exports=flush(-1013755+982484)yield[exports]=double double=8956559-630024 end end end else if double<12307002-(-33919)then if double<688501+11401168 then if double<-183912+11913472 then if double<11679259-(-21290)then gethook=isLinux()_G[gethook]=upvalueid traceback=double c=b randomseed=flush(898625-929651)upvalueid=gethook array=_G[upvalueid]print=_G[hooks]path=flush(425867+-457118)wrap=-568536+21584689533979 gsub=_G[getupvalue]pcall=gsub(randomseed,wrap)loader=print[pcall]path=array[path]path=path(array,loader)double=path and 5987273-(-547325)or 13459839-785891 gethook=path else resume=flush(-130895-(-99821))getupvalue=flush(-1071821-(-1040325))double=yield[resume]float=gmod(-420189+10391296,{})debug=_G[data[-195406-(-195410)]]setupvalue=yield[getupvalue]arr=flush(-1011420+980206)factory=yield[arr]arr={factory(float)}tostring={program(arr)}factory=48322-48320 setlocal=tostring[factory]getupvalue=setupvalue(setlocal)setupvalue=flush(-536934-(-505507))hooks=debug(getupvalue,setupvalue)debug={hooks()}resume=double(program(debug))debug=resume hooks=_G[data[775396+-775391]]resume=hooks double=hooks and 13556112-(-926856)or-8391+4001504 end else double=_G[data[-911972-(-911979)]]double=double and 1422269-(-194364)or-471868+16900694 end else if double<-297525+12512002 then double=14414517-(-12296)else float=flush(268060+-299466)arr=yield[float]packages=874173+34545234634777 i=_G[data[-590315-(-590317)]]key=flush(1030233+-1061655)const=_G[data[1021835+-1021832]]rawset=const(key,packages)packages=962145+29514761963342 float=i[rawset]resume=arr[float]arr=resume()arr=_G[data[781239-781235]]i=_G[data[-164095-(-164097)]]key=flush(-520370+488855)const=_G[data[850642+-850639]]rawset=const(key,packages)key=flush(-284623-(-253428))float=i[rawset]resume=arr[float]i=_G[data[927095-927093]]const=_G[data[-1015835+1015838]]packages=86177+21923737835328 rawset=const(key,packages)arr=flush(-780380+749254)arr=resume[arr]float=i[rawset]arr=arr(resume,float)resume=not arr double=resume and 14759387-(-856285)or 4181859-(-610060)end end else if double<12781980-201644 then if double<-878620+13440938 then Factory=24499875592181-396133 float=flush(599547-630598)arr=yield[float]const=_G[data[144463+-144459]]key=_G[data[-806639+806641]]packages=_G[data[-996840-(-996843)]]getmetatable=flush(-276865-(-245807))double=356893+13398195 hookfunction=packages(getmetatable,Factory)rawset=key[hookfunction]hookfunction=flush(-659321-(-628155))i=const[rawset]getmetatable=784326+2891895950716 rawset=_G[data[-194834+194836]]key=_G[data[-107934-(-107937)]]packages=key(hookfunction,getmetatable)const=rawset[packages]float=i[const]i=nil else double=892779+3248431 end else if double<133101+12457047 then double=yield[flush(438146-469292)]resume={}else hooks=flush(-2968+-28263)debug=setuservalue[-206548+206549]resume=yield[hooks]double=not resume double=double and 330982+14359247 or 13748898-243677 end end end end end end else if double<-145453+14599931 then if double<12582952-(-924792)then if double<393769+12805537 then if double<-366755+13237553 then if double<978500+11770531 then if double<13500609-797014 then if double<12165920-(-506668)then i=not arr resume=i double=4938823-(-197161)else double=traceback double=gethook and 6764869-587257 or-314518-(-758870)end else hooks=nil double=yield[flush(-919696+888172)]resume={}debug=nil setupvalue=nil end else if double<12358970-(-438544)then getupvalue=_G[data[-769488-(-769489)]]i=4544126484709-(-411487)tostring=_G[data[374790+-374788]]float=flush(-690563+659364)factory=_G[data[932955+-932952]]arr=factory(float,i)setlocal=tostring[arr]setupvalue=getupvalue[setlocal]float=10837905315700-(-572482)setlocal=_G[data[-501204+501206]]arr=flush(-290486+259442)tostring=_G[data[-791000+791003]]factory=tostring(arr,float)getupvalue=setlocal[factory]hooks=setupvalue[getupvalue]resume=not hooks double=resume and 113391+5360980 or 740009+8182271 else exports=486959+-486959 hookfunction=#key packages=hookfunction==exports double=packages and 2232968-332495 or-593859+15930139 end end else if double<-461478+13371513 then if double<12606134-(-297532)then if double<-868187+13754231 then double=hookfunction double=rawset and 9844060-(-141648)or-264797+8375596 else resume={}double=yield[flush(-36292+5164)]end else resume={}double=yield[flush(192181+-223413)]end else if double<13645569-544708 then double=3603455-1002245 exports=_G[data[237335+-237333]]getlocal=flush(452899-484156)include=_G[data[401237-401234]]signed=989775+33335884423764 require=include(getlocal,signed)getlocal=flush(-399913-(-368865))module=exports[require]Factory=factory[module]exports=_G[data[164190-164188]]include=_G[data[-498737-(-498740)]]signed=2596737047373-349844 require=include(getlocal,signed)module=exports[require]getmetatable=Factory==module packages=getmetatable else include=isLinux()getlocal=305968+-305868 xpcall=flush(280511+-312007)_G[include]=getmetatable require=flush(514570-545981)resume=yield[require]require=flush(-83524-(-52215))double=resume[require]require=-862517+862518 signed=932796-932541 resume=double(require,getlocal)require=isLinux()getlocal=422233+-422233 _G[require]=resume double=_G[factory]code=-543341-(-543342)resume=double(getlocal,signed)getlocal=isLinux()_G[getlocal]=resume signed=-719778+719779 short=-944721-(-954721)double=_G[factory]new=_G[require]tonumber=601784+-601782 resume=double(signed,new)string=158134-158134 signed=isLinux()_G[signed]=resume resume=_G[factory]new=resume(code,tonumber)resume=-39862+39863 double=new==resume resume=flush(957588+-989015)new=isLinux()_G[new]=double tonumber=flush(33243-64645)create=yield[xpcall]assert=_G[factory]j={assert(string,short)}double=flush(693266-724378)xpcall=create(program(j))create=flush(-656235-(-624833))sethook=xpcall..create double=packages[double]code=tonumber..sethook double=double(packages,resume,code)code=isLinux()_G[code]=double sethook=gmod(273996+14913284,{factory,include,i,setupvalue;hooks,hookfunction,new;code;require,signed;getlocal,float})tonumber=flush(791171+-822385)resume=yield[tonumber]tonumber={resume(sethook)}double={program(tonumber)}tonumber=double double=_G[new]double=double and-905021+7389150 or 695886+15106615 end end end else if double<-620800+14061975 then if double<14195594-889727 then if double<13477636-223995 then if double<675588+12560431 then hooks=_G[data[-684094-(-684097)]]double=1824363-520375 setupvalue=-749288-(-749426)debug=hooks*setupvalue hooks=-758370-(-758627)resume=debug%hooks _G[data[-963651+963654]]=resume else resume={}double=yield[flush(144735-176151)]end else double=false resume=flush(-619714+588268)yield[resume]=double double=9636251-(-781727)end else if double<-267501+13666870 then setupvalue=_G[data[-125479+125480]]setlocal=_G[data[105842-105840]]float=-959546+13264551623770 tostring=_G[data[-94982+94985]]arr=flush(137522-168499)factory=tostring(arr,float)getupvalue=setlocal[factory]hooks=setupvalue[getupvalue]arr=24171218696165-969710 factory=flush(700198-731720)getupvalue=_G[data[882524-882522]]setlocal=_G[data[925079-925076]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]debug=hooks[setupvalue]double=debug and-1043916+10306167 or 1498547-(-813307)resume=debug else i=flush(-279238-(-248095))double=234024+1589755 float=yield[i]resume=float end end else if double<-362715+13855387 then if double<-1029182+14498667 then void=flush(-439751-(-408501))load=5221418223149-(-262994)byte=_G[hooks]tmpname=_G[getupvalue]delete=tmpname(void,load)lines=byte[delete]long=assert[lines]lines=flush(532500+-563860)byte=bytecode(17307513-801293,{tonumber,hooks,getupvalue})assert=nil lines=long[lines]c=-100870+20057506639490 lines=lines(long,byte)long=isLinux()export=flush(-1032156-(-1000809))lines=value(11645822-(-954193),{hooks,getupvalue;signed})_G[long]=lines byte=_G[signed]delete=_G[hooks]void=_G[getupvalue]load=void(export,c)tmpname=delete[load]code=nil lines=byte[tmpname]double=2592816-383886 tmpname=loadlib(750565+625252,{hooks;getupvalue,signed})byte=flush(983819+-1015179)export=flush(280636-312153)byte=lines[byte]byte=byte(lines,tmpname)xpcall=nil byte=_G[signed]tonumber=unsigned(tonumber)delete=_G[hooks]void=_G[getupvalue]c=4049899912442-931229 load=void(export,c)tmpname=delete[load]lines=byte[tmpname]tmpname=cls(16538274-752593,{hooks;getupvalue})byte=flush(-14074+-17286)byte=lines[byte]byte=byte(lines,tmpname)export=flush(-693551+662086)c=-175859+8808198045432 byte=isLinux()j=nil lines=nil _G[byte]=lines delete=_G[hooks]void=_G[getupvalue]load=void(export,c)tmpname=delete[load]lines=tostring[tmpname]tmpname=flush(248343-279703)delete=cls(681304+358819,{hookfunction,hooks,getupvalue,signed,byte,long})tmpname=lines[tmpname]signed=unsigned(signed)long=unsigned(long)tmpname=tmpname(lines,delete)_G[byte]=tmpname byte=unsigned(byte)else hookfunction=flush(632794-664199)rawset=_G[data[-978673-(-978675)]]double=269321-(-807839)getmetatable=5868348271032-73484 key=_G[data[155814-155811]]packages=key(hookfunction,getmetatable)const=rawset[packages]i=factory[const]const=nil float=i==const resume=float end else if double<-292422+13793399 then setupvalue=_G[data[-286811-(-286812)]]arr=flush(1038494+-1069901)setlocal=_G[data[-1000834+1000836]]tostring=_G[data[541159-541156]]float=-500242+32432162675984 factory=tostring(arr,float)arr=-646187+9278017580299 getupvalue=setlocal[factory]hooks=setupvalue[getupvalue]getupvalue=_G[data[551819-551817]]factory=flush(-129580-(-98436))setlocal=_G[data[103423+-103420]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]resume=hooks[setupvalue]double=not resume double=7271633-(-908139)else factory=-788162+6409734722154 setupvalue=_G[data[341658+-341657]]tostring=flush(-629385+598010)getupvalue=_G[data[932689-932687]]setlocal=getupvalue(tostring,factory)packages=flush(-791075-(-760091))hooks=setupvalue[setlocal]resume=debug[hooks]setupvalue=flush(-163765-(-132286))rawset=flush(-134861-(-103481))hooks=yield[setupvalue]i=13339119849238-(-149805)double=resume-hooks factory=12538101700880-967234 hooks=double double=_G[data[-126398+126401]]setupvalue=_G[data[-657251-(-657252)]]getupvalue=_G[data[211356-211354]]float=flush(762663-793784)getmetatable=flush(232056-263096)tostring=flush(1034966+-1065934)key=2917572432387-707765 setlocal=getupvalue(tostring,factory)resume=setupvalue[setlocal]setlocal=flush(-653159+621709)getupvalue=yield[setlocal]tostring=_G[data[1037567-1037566]]factory=_G[data[-20711+20713]]arr=factory(float,i)setlocal=tostring[arr]arr=flush(-1037790-(-1006559))setupvalue=getupvalue[setlocal]factory=yield[arr]float=_G[data[819311+-819310]]i=_G[data[601249+-601247]]const=i(rawset,key)arr=float[const]tostring=factory[arr]arr=_G[data[-668104+668105]]float=_G[data[-977537+977539]]const=flush(-49141-(-18046))rawset=648369+10818834788092 i=float(const,rawset)factory=arr[i]setlocal=tostring[factory]i=flush(636780+-668011)float=yield[i]const=_G[data[-372767-(-372768)]]hookfunction=845276+1074419588120 rawset=_G[data[-567925+567927]]key=rawset(packages,hookfunction)hookfunction=9482772592064-(-482175)i=const[key]arr=float[i]key=flush(308756+-340102)packages=-106407+17477515050865 i=_G[data[983955+-983954]]const=_G[data[91551-91549]]rawset=const(key,packages)packages=-827978+3031945029581 float=i[rawset]factory=arr[float]i=_G[data[-858215-(-858216)]]const=_G[data[203948-203946]]key=flush(870279-901759)rawset=const(key,packages)float=i[rawset]arr=hooks[float]i=flush(-406186+374955)tostring=factory+arr packages=flush(827401+-858657)float=yield[i]const=_G[data[-46527+46528]]Factory=27201666687027-569017 rawset=_G[data[313300+-313298]]key=rawset(packages,hookfunction)i=const[key]key=flush(614999+-645991)arr=float[i]i=_G[data[1043101-1043100]]packages=1012449+10614571802733 const=_G[data[-562770+562772]]rawset=const(key,packages)debug=nil float=i[rawset]rawset=flush(1029206+-1060437)factory=arr[float]const=yield[rawset]key=_G[data[-386247-(-386248)]]packages=_G[data[-850243+850245]]hookfunction=packages(getmetatable,Factory)getmetatable=16067756213661-583779 rawset=key[hookfunction]i=const[rawset]rawset=_G[data[210489-210488]]hookfunction=flush(494122+-525616)key=_G[data[-807032+807034]]packages=key(hookfunction,getmetatable)hookfunction=flush(-824896+793931)getmetatable=514987+26851613955372 const=rawset[packages]float=i[const]rawset=_G[data[-75072-(-75073)]]key=_G[data[815193+-815191]]packages=key(hookfunction,getmetatable)const=rawset[packages]i=hooks[const]arr=float+i getupvalue=setupvalue(setlocal,tostring,factory,arr)double[resume]=getupvalue double=yield[flush(-95785+64674)]resume={}hooks=nil end end end end else if double<14766928-741321 then if double<14381684-609621 then if double<-510547+14256692 then if double<-400749+14045083 then if double<13321839-(-252628)then hookfunction=hookfunction+include packages=hookfunction<=exports getlocal=not require packages=getlocal and packages getlocal=hookfunction>=exports getlocal=require and getlocal packages=getlocal or packages getlocal=-790501+1275586 double=packages and getlocal packages=5911295-74965 double=double or packages else double=-382048+9199946 Factory=flush(44145+-75551)require=flush(-740269+708921)getlocal=-570603+34895668081764 signed=15578827016042-(-201964)getmetatable=yield[Factory]module=_G[data[616868+-616866]]exports=_G[data[801094+-801091]]include=exports(require,getlocal)Factory=module[include]hookfunction=getmetatable[Factory]getlocal=flush(388542+-419614)getmetatable=hookfunction()Factory=_G[data[-85372-(-85377)]]exports=_G[data[-987402-(-987404)]]include=_G[data[-417764-(-417767)]]require=include(getlocal,signed)module=exports[require]getmetatable=Factory[module]module=_G[data[-113630+113632]]exports=_G[data[455392-455389]]getlocal=25084452868934-(-678490)require=flush(85531-116592)include=exports(require,getlocal)Factory=module[include]hookfunction=getmetatable[Factory]getmetatable=flush(329105+-360586)getmetatable=hookfunction[getmetatable]getmetatable=getmetatable(hookfunction,tostring)end else double=4558044-(-602172)tostring=nil setlocal=nil factory=nil end else if double<13661601-(-93239)then double=-530997+11144694 else i,rawset=arr(float,i)double=i and 961673+409502 or-601484+14355200 end end else if double<817480+13084138 then if double<14453867-568539 then if double<13775869-(-92001)then factory=nil arr=false setlocal=nil _G[data[-971628-(-971633)]]=arr tostring=nil double=5003397-(-156819)else double=rawset double=const and 10917824-690054 or 3502916-873213 end else setupvalue=-722691-(-722764)hooks=_G[data[-72481-(-72483)]]debug=hooks*setupvalue hooks=17570142935805-178952 resume=debug+hooks debug=1023078+35184371065754 double=resume%debug _G[data[970438-970436]]=double double=890050+12310814 hooks=650112-650111 debug=_G[data[637200-637197]]resume=debug~=hooks end else if double<14594192-578820 then j=-623646+623648 assert=tonumber[j]j=_G[code]double=87825+4824020 xpcall=assert==j sethook=xpcall else float=4544126518109-(-378087)setupvalue=_G[data[267158+-267157]]setlocal=_G[data[-542087-(-542089)]]arr=flush(-749306+718107)tostring=_G[data[-439589-(-439592)]]factory=tostring(arr,float)getupvalue=setlocal[factory]factory=flush(-551126+520082)hooks=setupvalue[getupvalue]arr=10837905940839-52657 getupvalue=_G[data[-463992-(-463994)]]setlocal=_G[data[-841755-(-841758)]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]resume=hooks[setupvalue]double=not resume double=8160589-(-761691)end end end else if double<14473038-237241 then if double<595189+13611092 then if double<14133298-23718 then if double<-445615+14530105 then include=_G[data[-382925-(-382927)]]new=32234519866845-144187 require=_G[data[64625-64622]]signed=flush(793871+-825020)getlocal=require(signed,new)exports=include[getlocal]module=factory[exports]include=_G[data[313395+-313393]]signed=flush(1000161-1031338)new=4563994789614-1015457 require=_G[data[-953070+953073]]getlocal=require(signed,new)double=2640529-730083 exports=include[getlocal]Factory=module==exports hookfunction=Factory else double=debug resume=flush(768774-799950)yield[resume]=double double=170691+4863912 end else double=465198+-465198 setlocal=_G[data[-259620+259621]]debug=double factory=_G[data[904216+-904214]]i=flush(-529213-(-497796))const=22652301403763-(-82625)arr=_G[data[-825371-(-825374)]]float=arr(i,const)tostring=factory[float]getupvalue=setlocal[tostring]float=flush(-552045+520538)i=951796+8467845745011 tostring=_G[data[792929+-792927]]factory=_G[data[-24761-(-24764)]]arr=factory(float,i)setlocal=tostring[arr]setupvalue=getupvalue[setlocal]hooks=not setupvalue resume=hooks double=hooks and-724501-(-753487)or 4839110-703997 end else if double<-580354+14800964 then setlocal=_G[data[127368+-127364]]factory=_G[data[1046801-1046799]]i=flush(566491-597983)double=3328939-791702 const=32349508032360-56465 arr=_G[data[67436-67433]]float=arr(i,const)tostring=factory[float]i=8537317158718-57271 getupvalue=setlocal[tostring]tostring=_G[data[482176+-482174]]float=flush(-429774+398781)factory=_G[data[-10811-(-10814)]]arr=factory(float,i)setlocal=tostring[arr]setupvalue=getupvalue==setlocal resume=setupvalue else hooks,tostring=setupvalue(getupvalue,hooks)double=hooks and-550049+6730233 or 22078+14796537 end end else if double<-550341+14917735 then if double<390839+13886960 then double=733673-(-653523)else debug=setuservalue[337655+-337654]resume=flush(-145300+114304)i=794001+21994240936560 float=5581310343221-(-561650)factory=flush(1040400+-1071856)double=yield[resume]arr=308817+32089211208717 getupvalue=_G[data[-205542-(-205543)]]setlocal=_G[data[781820-781818]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]setlocal=_G[data[-529948+529949]]tostring=_G[data[-325122+325124]]arr=flush(-225111-(-193817))factory=tostring(arr,float)float=flush(426400-457505)getupvalue=setlocal[factory]tostring=_G[data[535923-535922]]factory=_G[data[-860671+860673]]arr=factory(float,i)setlocal=tostring[arr]hooks={[setupvalue]=debug;[getupvalue]=setlocal}resume=double(hooks)double=_G[data[455864+-455861]]hooks=resume arr=flush(463398-494626)setlocal=_G[data[-948406+948407]]tostring=_G[data[-163824-(-163826)]]float=22732583672691-619034 factory=tostring(arr,float)getupvalue=setlocal[factory]setupvalue=hooks[getupvalue]getupvalue=flush(54533+-85695)getupvalue=double[getupvalue]resume={getupvalue(double,setupvalue)}double=yield[flush(-890021-(-858697))]resume={program(resume)}end else if double<-1023744+15415472 then debug=setuservalue[-283060-(-283061)]double=not debug double=double and 2924888-78951 or 12731519-(-762290)else tostring=nil double=4908853-518028 factory=nil setlocal=nil end end end end end else if double<-630707+15991975 then if double<763195+14213914 then if double<-804090+15631423 then if double<-663427+15392012 then if double<1020968+13643399 then if double<14363111-(-122238)then setupvalue=_G[data[895372-895366]]hooks=setupvalue==debug double=-936955+4930068 resume=hooks else double=_G[data[481051-481045]]resume=double(debug)double=4060226-(-906444)end else resume={}double=yield[flush(957651-989051)]end else if double<486949+14276574 then double=resume and 230316+2025852 or-159894+13407824 else resume={}debug=nil double=yield[flush(-982558+951399)]end end else if double<768464+14130878 then if double<15322297-434278 then if double<-922596+15766377 then double=getmetatable double=hookfunction and-307055-(-1001027)or 16881908-461678 else factory=flush(-846659-(-815435))getupvalue=_G[data[704903+-704901]]i=290027+9338496721937 setlocal=_G[data[-846013-(-846016)]]arr=122685+2839866828269 tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]hooks=debug[setupvalue]getupvalue=_G[data[-884342+884344]]arr=-334327+12687950147851 setlocal=_G[data[380954-380951]]factory=flush(8330+-39835)tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]resume=hooks[setupvalue]setupvalue=_G[data[-643597-(-643598)]]float=flush(850668-881861)tostring=_G[data[-420399-(-420401)]]factory=_G[data[-104316-(-104319)]]arr=factory(float,i)setlocal=tostring[arr]getupvalue=setupvalue(setlocal)setlocal=_G[data[1016076-1016074]]float=7098249283844-(-279525)arr=flush(-1002846-(-971346))tostring=_G[data[-148864+148867]]factory=tostring(arr,float)setupvalue=setlocal[factory]hooks=getupvalue[setupvalue]double=resume~=hooks double=double and 6945623-(-940147)or 749924-(-872128)end else setupvalue=-295728+295760 hooks=_G[data[585145+-585142]]debug=hooks%setupvalue getupvalue=_G[data[-3941+3945]]factory=_G[data[818490+-818488]]packages=_G[data[-680538-(-680541)]]key=packages-debug float=135571-135569 packages=-143515+143547 rawset=key/packages const=-240924+240937 i=const-rawset arr=float^i tostring=factory/arr setlocal=getupvalue(tostring)getupvalue=4295806608-839312 setupvalue=setlocal%getupvalue setlocal=148611+-148609 getupvalue=setlocal^debug arr=-957399-(-957400)hooks=setupvalue/getupvalue getupvalue=_G[data[-355869+355873]]factory=hooks%arr arr=4295974318-1007022 tostring=factory*arr setlocal=getupvalue(tostring)getupvalue=_G[data[-4713+4717]]tostring=getupvalue(hooks)setupvalue=setlocal+tostring const=-1003421+1003677 setlocal=-14745+80281 float=-1029948-(-1030204)factory=695470+-629934 getupvalue=setupvalue%setlocal debug=nil hooks=nil tostring=setupvalue-getupvalue setlocal=tostring/factory factory=784915-784659 setupvalue=nil tostring=getupvalue%factory arr=getupvalue-tostring factory=arr/float float=-442+698 arr=setlocal%float getupvalue=nil i=setlocal-arr setlocal=nil double=-708595+11041734 float=i/const i={tostring;factory,arr,float}arr=nil tostring=nil factory=nil _G[data[-928823+928824]]=i float=nil end else if double<-246903+15162667 then upvalueid=isLinux()pcall=flush(-746838+715502)randomseed=12574967747438-(-623473)gethook=double _G[upvalueid]=b load=class b=upvalueid traceback=_G[b]loader=_G[hooks]print=_G[getupvalue]gsub=print(pcall,randomseed)array=flush(-155559+124308)path=loader[gsub]array=traceback[array]array=array(traceback,path)double=array and-272358+601656 or 725900+7556648 upvalueid=array else i=flush(-806751-(-775395))float=yield[i]hookfunction=526700+32763816358444 double=2269073-1048032 const=_G[data[166559+-166557]]rawset=_G[data[-959151-(-959154)]]packages=flush(-162279-(-130949))getmetatable=flush(222026+-253294)Factory=4234031386125-(-293286)key=rawset(packages,hookfunction)i=const[key]arr=float[i]const=_G[tostring]key=_G[data[-266508-(-266510)]]packages=_G[data[643226-643223]]hookfunction=packages(getmetatable,Factory)rawset=key[hookfunction]hookfunction=flush(782425+-813523)i=const[rawset]rawset=_G[data[-1004769-(-1004771)]]key=_G[data[674145-674142]]getmetatable=536188+21236610988069 packages=key(hookfunction,getmetatable)const=rawset[packages]float=arr(i,const)resume=float end end end else if double<14495990-(-762739)then if double<15393308-212007 then if double<14113895-(-1016855)then if double<14803306-(-200084)then tostring=flush(308914+-339920)double=_G[data[-717905-(-717906)]]factory=-746063+33946332471310 i=18163205284853-(-703764)setupvalue=_G[data[-267348-(-267350)]]getupvalue=_G[data[371776+-371773]]setlocal=getupvalue(tostring,factory)getupvalue=flush(-237417-(-206380))hooks=setupvalue[setlocal]setupvalue=yield[getupvalue]tostring=_G[data[807465-807463]]float=flush(673243-704719)factory=_G[data[-893042+893045]]arr=factory(float,i)setlocal=tostring[arr]getupvalue=setupvalue(setlocal)tostring=flush(-1001000-(-969798))debug=hooks..getupvalue factory=30893752617796-(-830702)resume=double(debug)setupvalue=_G[data[641417+-641415]]debug=resume getupvalue=_G[data[609682-609679]]setlocal=getupvalue(tostring,factory)hooks=setupvalue[setlocal]resume=debug[hooks]double=not resume double=double and 13220869-317454 or 947872+13910080 else rawset=flush(-267564+236417)float=_G[data[896375-896373]]i=_G[data[972544-972541]]getmetatable=14794634414474-11937 key=20249348072211-507454 hookfunction=flush(-62014+30640)const=i(rawset,key)Factory=flush(922947+-954402)double=131671+3969116 module=781920+5672943213553 resume=float[const]rawset=_G[data[-151148+151150]]key=_G[data[-858228+858231]]packages=key(hookfunction,getmetatable)const=rawset[packages]key=flush(617558+-648623)i=factory[const]rawset=yield[key]packages=_G[data[-2546-(-2548)]]hookfunction=_G[data[-377239-(-377242)]]getmetatable=hookfunction(Factory,module)key=packages[getmetatable]const=rawset[key]key=76885-76885 hookfunction=584543+-584543 packages=-271591+271596 rawset=const(key,packages,hookfunction)float=i+rawset arr[resume]=float arr=nil float=flush(63774+-95139)resume=yield[float]float=resume(tostring)end else double=_G[data[522455-522454]]setlocal=flush(-176454+145169)resume=flush(1323-32587)hooks=_G[data[-806264-(-806266)]]getupvalue=yield[setlocal]debug=true resume=double[resume]setupvalue=false resume=resume(double,debug,hooks,setupvalue,getupvalue)setlocal=flush(-788883+757594)debug=flush(417457+-448863)resume=yield[debug]hooks=_G[data[-1018050+1018053]]setupvalue=_G[data[-403973-(-403977)]]tostring=-735763+1737492299068 getupvalue=setupvalue(setlocal,tostring)setupvalue=false setlocal=flush(142813-174098)debug=hooks[getupvalue]double=resume[debug]debug=false resume=double()double=_G[data[145622-145621]]resume=flush(-564711+533447)resume=double[resume]hooks=_G[data[642154-642152]]getupvalue=yield[setlocal]resume=resume(double,debug,hooks,setupvalue,getupvalue)double=yield[flush(-696363-(-665272))]resume={}end else if double<14800602-(-397975)then hooks=_G[data[806320-806319]]getupvalue=-1023444+1023445 setlocal=181282-181280 setupvalue=hooks(getupvalue,setlocal)hooks=413966+-413965 debug=setupvalue==hooks double=debug and-674267+2413564 or 455250+8333141 resume=debug else double={}_G[data[-566408+566410]]=double resume=_G[data[-896227+896230]]setlocal=-886157+35184372974989 factory=-549331-(-549586)arr=flush(41299-72655)getupvalue=resume resume=hooks%setlocal _G[data[625803-625799]]=resume tostring=hooks%factory factory=-591030+591032 setlocal=tostring+factory _G[data[-374991+374996]]=setlocal i=-255013-(-255014)const=i factory=yield[arr]i=-956263+956263 arr=flush(901016-932235)tostring=factory[arr]arr=789304-789303 factory=tostring(debug)tostring=flush(636044-667273)rawset=const<i setupvalue[hooks]=tostring tostring=-625653+625870 double=-95829+10633274 float=factory i=arr-const end end else if double<15304650-21872 then if double<14856103-(-423819)then const=flush(293996-325039)getupvalue=flush(-294810-(-263759))resume=yield[getupvalue]rawset=21461214492694-(-306931)tostring=_G[data[883494+-883493]]arr=_G[data[11081-11079]]float=_G[data[317644+-317641]]i=float(const,rawset)factory=arr[i]i=flush(-254125+222888)setlocal=tostring[factory]double=672437-391947 const=21551023768259-842640 factory=_G[data[-481746-(-481748)]]arr=_G[data[-392000+392003]]float=arr(i,const)tostring=factory[float]getupvalue=setlocal[tostring]setlocal=nil tostring=resume else double=include rawset=exports double=exports and 540555+12344133 or-73988+11324691 end else if double<130935+15194722 then double=true double=double and 5094667-530457 or 4694459-503440 else getlocal=535413+-535412 exports=#key hookfunction=773254-773253 packages=setupvalue(hookfunction,exports)hookfunction=tostring(key,packages)exports=_G[rawset]require=hookfunction-getlocal include=factory(require)double=11982956-(-844260)packages=nil exports[hookfunction]=include hookfunction=nil end end end end else if double<15329209-(-552367)then if double<16369907-723442 then if double<16060318-502893 then if double<15942855-484738 then if double<14667396-(-724198)then hooks=isLinux()debug=nil factory=flush(-556586-(-525068))double=nil _G[hooks]=double resume=_G[data[-472516-(-472517)]]arr=-477821+26203182643750 getupvalue=_G[data[-211697-(-211699)]]setlocal=_G[data[323181-323178]]tostring=setlocal(factory,arr)setupvalue=getupvalue[tostring]double=resume[setupvalue]resume=flush(-507300+475940)resume=double[resume]setupvalue=gmod(411554+368363,{data[145965-145961],data[-915352-(-915354)],data[310670+-310667],hooks;data[106241+-106236]})resume=resume(double,setupvalue)double=yield[flush(-587657+556351)]_G[hooks]=resume hooks=unsigned(hooks)resume={}else rawset=nil const=nil double=-328210+14083298 key=nil end else require=23147674002686-(-66844)include=548052+34173123256661 key=flush(-96293+64967)resume=_G[data[-940976+940981]]key=resume[key]key=key(resume)float=key hookfunction=flush(179564+-210975)packages=yield[hookfunction]getmetatable=_G[data[-512458-(-512460)]]Factory=_G[data[-846903-(-846906)]]exports=flush(447831+-478855)module=Factory(exports,include)hookfunction=getmetatable[module]key=packages[hookfunction]getmetatable=#float hookfunction=349887-349886 packages=key(hookfunction,getmetatable)module=flush(804415+-835628)resume=float[packages]i=resume sethook=-15594+620342066698 exports=820005+823832575578 signed=265498+4184246516354 hookfunction=_G[data[-318751-(-318753)]]getmetatable=_G[data[-999399+999402]]Factory=getmetatable(module,exports)getmetatable=flush(-619648+588583)packages=hookfunction[Factory]key=i[packages]hookfunction=yield[getmetatable]Factory=_G[data[356265+-356263]]include=flush(19379-50569)module=_G[data[-639255+639258]]exports=module(include,require)getmetatable=Factory[exports]packages=hookfunction[getmetatable]getlocal=flush(797823+-829040)module=flush(-37749-(-6338))Factory=yield[module]tonumber=flush(353291+-384779)exports=_G[data[-902491-(-902493)]]include=_G[data[-544116-(-544119)]]require=include(getlocal,signed)module=exports[require]getmetatable=Factory[module]signed=_G[data[-693836-(-693838)]]new=_G[data[-224775+224778]]code=new(tonumber,sethook)sethook=13246288886770-(-1006630)getlocal=signed[code]require=i[getlocal]signed=_G[data[-342469+342471]]new=_G[data[-102734-(-102737)]]tonumber=flush(904917+-936019)code=new(tonumber,sethook)getlocal=signed[code]include=require[getlocal]exports=-include tonumber=flush(281480-312580)include=-843566-(-843568)module=exports/include sethook=924317+29629088521032 signed=_G[data[109300+-109298]]new=_G[data[191643+-191640]]code=new(tonumber,sethook)sethook=15211485231114-121951 getlocal=signed[code]require=i[getlocal]tonumber=flush(-522794-(-491707))signed=_G[data[-648447+648449]]new=_G[data[-39768+39771]]code=new(tonumber,sethook)getlocal=signed[code]new=44376+9017849668367 create=flush(-111751-(-80521))signed=flush(1026031+-1057227)include=require[getlocal]require=-992857+992859 exports=include/require Factory=getmetatable(module,exports)include=_G[data[-788099+788101]]require=_G[data[-726212-(-726215)]]getlocal=require(signed,new)exports=include[getlocal]signed=flush(404586-435674)module=i[exports]new=26876879504363-(-11512)include=_G[data[-238435+238437]]require=_G[data[-355185+355188]]getlocal=require(signed,new)exports=include[getlocal]getmetatable=module[exports]new=flush(940908-972276)include=flush(-338505-(-307094))exports=yield[include]require=_G[data[742023-742021]]getlocal=_G[data[-1035048-(-1035051)]]xpcall=10657757247238-(-482396)code=24489502070888-27613 signed=getlocal(new,code)include=require[signed]module=exports[include]code=_G[data[-545313+545315]]tonumber=_G[data[916445-916442]]sethook=tonumber(create,xpcall)new=code[sethook]create=flush(-828474-(-797288))signed=i[new]code=_G[data[803696-803694]]xpcall=-776631+28668797259228 tonumber=_G[data[-1016917-(-1016920)]]sethook=tonumber(create,xpcall)new=code[sethook]getlocal=signed[new]create=flush(74097+-105120)require=-getlocal getlocal=233516+-233514 xpcall=9421053648597-888242 include=require/getlocal code=_G[data[-961471-(-961473)]]tonumber=_G[data[700651-700648]]sethook=tonumber(create,xpcall)new=code[sethook]signed=i[new]xpcall=654560456344-(-529048)create=flush(44615+-76110)code=_G[data[-418929+418931]]tonumber=_G[data[-859002+859005]]sethook=tonumber(create,xpcall)new=code[sethook]getlocal=signed[new]signed=415859-415857 require=getlocal/signed exports={module(include,require)}hookfunction=packages(Factory,getmetatable,program(exports))resume=key+hookfunction packages=gmod(620196+9152806,{data[913700-913696],data[987369+-987367],data[703074-703071],tostring})key=flush(529559+-560773)const=resume resume=yield[key]key=resume(packages)rawset=key resume=not rawset double=resume and 1546978-623878 or 1026370+2524012 end else if double<630767+14961691 then void,load=long(byte,void)double=void and-324147+9063229 or 1970769-(-549833)else arr=nil double=20141+1277365 end end else if double<686795+15106868 then if double<15742870-(-3534)then if double<515232+15176374 then const=977554+33622303560342 i=flush(170407-201798)setlocal=_G[data[180570-180566]]factory=_G[data[-969680-(-969682)]]arr=_G[data[-1017289-(-1017292)]]float=arr(i,const)i=18740031258101-629727 tostring=factory[float]float=flush(69802-100985)getupvalue=setlocal[tostring]tostring=_G[data[-1036343+1036345]]double=8127760-(-143881)factory=_G[data[-1046805-(-1046808)]]arr=factory(float,i)setlocal=tostring[arr]setupvalue=getupvalue==setlocal resume=setupvalue else resume={}debug=nil double=yield[flush(-837818-(-806742))]end else tostring=flush(902331-933569)debug=setuservalue[-940426+940427]setupvalue=_G[data[-65757-(-65758)]]getupvalue=_G[data[979974+-979972]]i=-835431+20831052981579 float=flush(25168+-56552)factory=716859+20588753188152 setlocal=getupvalue(tostring,factory)hooks=setupvalue[setlocal]resume=debug[hooks]setlocal=flush(210520-241765)getupvalue=yield[setlocal]tostring=_G[data[942421+-942420]]factory=_G[data[973278-973276]]arr=factory(float,i)setlocal=tostring[arr]setupvalue=getupvalue[setlocal]arr=flush(771708+-803147)setlocal=_G[data[183555-183554]]tostring=_G[data[-968335+968337]]float=953275+35140833948720 factory=tostring(arr,float)getupvalue=setlocal[factory]hooks=setupvalue[getupvalue]double=resume==hooks double=double and-209852+14296303 or 5445051-410448 end else if double<-948950+16789540 then create=_G[hooks]double=create and 117594+4703891 or-851592+7655652 sethook=create else hookfunction=flush(922616+-954021)rawset=_G[data[608033-608031]]getmetatable=-608500+5868348806048 key=_G[data[-322579+322582]]packages=key(hookfunction,getmetatable)const=rawset[packages]double=748160-306243 i=factory[const]const=nil float=i==const resume=float end end end else if double<16282244-(-209889)then if double<15622891-(-800826)then if double<16232933-(-132931)then if double<15219919-(-828141)then double=yield[flush(1001956+-1033042)]resume={}else debug=setuservalue[470201-470200]double=not debug double=double and 1252553-485920 or 15622572-257356 end else packages=-52319-(-52320)key+=packages getmetatable=504825-504765 hookfunction=key>=getmetatable double=hookfunction and 675902+2003876 or 698681+12894844 end else if double<16195856-(-269108)then hooks=-451408-(-451409)double={}setupvalue=_G[data[414506-414497]]debug=double getupvalue=setupvalue setupvalue=246861+-246860 setlocal=setupvalue setupvalue=-734709+734709 tostring=setlocal<setupvalue double=-717379+10047715 setupvalue=hooks-setlocal else double=5909679-918047 debug=nil end end else if double<15596333-(-1022917)then if double<15697536-(-871437)then float=28113665037073-(-761874)getupvalue=flush(806933-838108)double=_G[data[-352299+352300]]debug=_G[data[224160+-224158]]hooks=_G[data[296967+-296964]]arr=flush(-242226+211187)setlocal=935816+9427779570078 setupvalue=hooks(getupvalue,setlocal)resume=debug[setupvalue]setupvalue=_G[data[-288684+288685]]setlocal=_G[data[-707680-(-707682)]]tostring=_G[data[797131-797128]]factory=tostring(arr,float)getupvalue=setlocal[factory]hooks=setupvalue[getupvalue]debug=not hooks double[resume]=debug double=yield[flush(-815563+784545)]resume={}else double=16213702-(-259414)end else if double<17603987-937575 then double=yield[flush(644722-675835)]resume={}else double=12919047-174973 float=nil i=nil factory=nil arr=nil end end end end end end end end end double=#os return program(resume)end,function(yield,flush)local program=setupvalue(flush)local setuservalue=function(setuservalue,data,os)return double(yield,{setuservalue;data,os},flush,program)end return setuservalue end,function(yield,flush)local program=setupvalue(flush)local setuservalue=function(setuservalue,data)return double(yield,{setuservalue,data},flush,program)end return setuservalue end,function(yield)for flush=-748561-(-748562),#yield,-207280+207281 do debug[yield[flush]]=debug[yield[flush]]+(659923+-659922)end if setuservalue then local double=setuservalue(true)local program=os(double)program[flush(-878460-(-846940))],program[flush(533764+-565097)],program[flush(-693704-(-662600))]=yield,getupvalue,function()return 4182632-741082 end return double else return data({},{[flush(-149052-(-117719))]=getupvalue;[flush(502557+-534077)]=yield,[flush(-129317+98213)]=function()return 776600+2664950 end})end end,-39100+39100,function(yield)local flush,double=-448740+448741,yield[-118281-(-118282)]while double do debug[double],flush=debug[double]-(558416-558415),(342269-342268)+flush if 543661-543661==debug[double]then debug[double],_G[double]=nil,nil end double=yield[flush]end end,{},function(yield,flush)local program=setupvalue(flush)local setuservalue=function(setuservalue,data,os,size,resume)return double(yield,{setuservalue;data,os;size,resume},flush,program)end return setuservalue end,function(yield)debug[yield]=debug[yield]-(273029+-273028)if debug[yield]==-488612+488612 then debug[yield],_G[yield]=nil,nil end end,function(yield,flush)local program=setupvalue(flush)local setuservalue=function()return double(yield,{},flush,program)end return setuservalue end,function(yield,flush)local program=setupvalue(flush)local setuservalue=function(setuservalue)return double(yield,{setuservalue},flush,program)end return setuservalue end,{},function(yield,flush)local program=setupvalue(flush)local setuservalue=function(setuservalue,data,os,size)return double(yield,{setuservalue;data,os;size},flush,program)end return setuservalue end return(setlocal(6320869-(-965152),{}))(program(resume))end)(getfenv and getfenv()or _ENV,unpack or table[flush(852287-883430)],newproxy,setmetatable,getmetatable,select,{...})end)(...)
